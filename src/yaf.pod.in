##  yaf manual page   -*- mode: text; fill-column: 78 -*-
##
##  @configure_input@
##
##  @DISTRIBUTION_STATEMENT_BEGIN@
##  YAF 3.0.0
##
##  Copyright 2023 Carnegie Mellon University.
##
##  NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
##  INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
##  UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
##  AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
##  PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
##  THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF
##  ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
##  INFRINGEMENT.
##
##  Licensed under a GNU GPL 2.0-style license, please see LICENSE.txt or
##  contact permission@sei.cmu.edu for full terms.
##
##  [DISTRIBUTION STATEMENT A] This material has been approved for public
##  release and unlimited distribution.  Please see Copyright notice for
##  non-US Government use and distribution.
##
##  GOVERNMENT PURPOSE RIGHTS â€“ Software and Software Documentation
##  Contract No.: FA8702-15-D-0002
##  Contractor Name: Carnegie Mellon University
##  Contractor Address: 4500 Fifth Avenue, Pittsburgh, PA 15213
##
##  The Government's rights to use, modify, reproduce, release, perform,
##  display, or disclose this software are restricted by paragraph (b)(2) of
##  the Rights in Noncommercial Computer Software and Noncommercial Computer
##  Software Documentation clause contained in the above identified
##  contract. No restrictions apply after the expiration date shown
##  above. Any reproduction of the software or portions thereof marked with
##  this legend must also reproduce the markings.
##
##  This Software includes and/or makes use of Third-Party Software each
##  subject to its own license.
##
##  DM23-2317
##  @DISTRIBUTION_STATEMENT_END@

=pod

=head1 NAME

B<yaf> - Yet Another Flowmeter

=head1 SYNOPSIS

    yaf     [--in INPUT_SPECIFIER] [--out OUTPUT_SPECIFIER]
            [--config CONFIGURATION_FILE]
            [--live LIVE_TYPE] [--ipfix TRANSPORT_PROTOCOL]
            [--no-output]
            [--decompress DECOMPRESS_DIR]
            [--filter BPF_FILTER]
            [--rotate ROTATE_DELAY] [--lock] [--caplist]
            [--daemonize] [--pidfile] [--promisc-off]
            [--stats INTERVAL][--no-stats] [--noerror]
            [--no-tombstone] [--tombstone-configured-id IDENTIFIER]
            [--export-interface]
            [--gre-decode] [--no-frag]
            [--vxlan-decode] [--vxlan-decode-ports PORTS]
            [--geneve-decode] [--geneve-decode-ports PORTS]
            [--max-frags FRAG_TABLE_MAX]
            [--ip4-only] [--ip6-only]
            [--idle-timeout IDLE_TIMEOUT]
            [--active-timeout ACTIVE_TIMEOUT]
            [--udp-temp-timeout TEMPLATE_TIMEOUT]
            [--no-vlan-in-key]
            [--force-read-all]
            [--flow-stats] [--delta]
            [--ingress INGRESS_INT] [--egress EGRESS_INT]
            [--no-element-metadata] [--no-template-metadata]
            [--max-payload PAYLOAD_OCTETS] [--udp-payload]
            [--max-export PAYLOAD_OCTETS]
            [--max-flows FLOW_TABLE_MAX]
            [--export-payload] [--payload-applabel-select LABELS]
            [--silk] [--udp-uniflow PORT]
            [--uniflow] [--mac] [--force-ip6-export]
            [--observation-domain DOMAIN_ID] [--entropy]
            [--applabel] [--dpi] [--dpi-select LABELS]
            [--dpi-rules-file RULES_FILE]
            [--ndpi] [--ndpi-protocol-file FILE]
            [--ipfix-port PORT] [--tls] [--tls-ca CA_PEM_FILE]
            [--tls-cert CERT_PEM_FILE] [--tls-key KEY_PEM_FILE]
            [--become-user UNPRIVILEGED_USER]
            [--become-group UNPRIVILEGED_GROUP]
            [--log LOG_SPECIFIER] [--loglevel LOG_LEVEL]
            [--verbose] [--version]
            [--p0fprint] [--p0f-fingerprints FILENAME]
            [--fpexport]
            [--plugin-name LIBPLUGIN_NAME[,LIBPLUGIN_NAME...]]
            [--plugin-opts "OPTIONS[,OPTIONS...]"]
            [--plugin-conf CONF_FILE_PATH[,CONF_FILE_PATH...]]
            [--pcap PCAP_FILE_PREFIX] [--pcap-per-flow]
            [--max-pcap MAX_FILE_MB] [--pcap-timer PCAP_ROTATE_DELAY]
            [--pcap-meta-file META_FILE_PREFIX] [--index-pcap]
            [--hash FLOW_KEY_HASH] [--stime FLOW_START_TIMEMS]


=head1 DESCRIPTION

B<yaf> is Yet Another Flowmeter and B<yaf> is a suite of tools to do flow
metering.  B<yaf> is used as a sensor to capture flow information on a network
and export that information in IPFIX format. It reads packet data from
B<pcap(3)> dumpfiles as generated by B<tcpdump(1)>, from live capture from an
interface using B<pcap(3)>, pf_ring, an Endace DAG capture device, a Napatech
adapter, or Netronome NFE card aggregates these packets into flows, and
exports flow records via IPFIX over SCTP, TCP or UDP, or into serialized IPFIX
message streams (IPFIX files) on the local file system.

Since B<yaf> is designed to be deployed on white-box sensors attached to local
network segments or span ports at symmetric routing points, it supports
bidirectional flow assembly natively. Biflow export is done via the export
method specified in B<RFC 5103> Bidirectional Flow Export using IPFIX. See the
B<OUTPUT> section below for information on this format.

B<yaf> also supports experimental partial payload capture, specifically for
banner-grabbing applications and protocol verification purposes.

The output of B<yaf> is designed to be collected and manipulated by flow
processing toolchains supporting IPFIX.  The B<yafscii(1)> tool, which is
installed as part of B<yaf>, can be used to print B<yaf> output in a
human-readable format somewhat reminiscent of B<tcpdump(1)>, though it does
not support printing structured data (e.g., subTemplateLists).  The
B<ipfixDump(1)> and B<ipfix2json(1)> tools from
L<fixbuf|https://tools.netsa.cert.org/libfixbuf/> also print IPFIX data as
text, and they support structured data.  B<yaf> output may also be analyzed
using the SiLK suite, Super Mediator
(L<https://tools.netsa.cert.org/super_mediator/>), and Analysis Pipeline
(L<https://tools.netsa.cert.org/analysis-pipeline5/>), all available from the
CERT NetSA group.

=head1 OPTIONS

=head2 Configuration File

The YAF configuration file can be used instead of or in addition to command
line arguments.  Lua must be installed for use of the B<yaf> configuration
file.

=over 4

=item B<--config> I<CONFIGURATION_FILE>

If present, use the variables set in the I<CONFIGURATION_FILE>.  The
I<CONFIGURATION_FILE> is a Lua configuration file, a plain text file that can
also be a Lua program.  A template configuration file can be found in
F<@prefix@/share/yaf/yaf.init>; the file must be modified before it can be
used by B<yaf>.  B<yaf> will use the variables set in the configuration file
along with any command line arguments.  See B<yaf.init(1)> for a description
of this file.

=back


=head2 Input Options

These options control where B<yaf> will take its input from. B<yaf> can read
packets from a pcap dumpfile (as generated by B<tcpdump -w>) or live from an
interface via F<libpcap>, F<libdag>, or F<libnapatech>, or Netronome API.  By
default, if no input options are given, B<yaf> reads a pcap dumpfile on
standard input.

=over 4

=item B<--in> I<INPUT_SPECIFIER>

I<INPUT_SPECIFIER> is an input specifier. If B<--live> is given, this is the
name of an interface (e.g. C<eth0>, C<en0>, C<dag0>, C<nt3g>, C<nt3g0:1>,
C<0:0>) to capture packets from.  Otherwise, it is a filename; the string B<->
may be used to read from standard input (the default). See B<--live> for more
information on formats for Napatech, Dag, and Netronome Interface formats.

=item B<--caplist>

If present, treat the filename in I<INPUT_SPECIFIER> as an ordered
newline-delimited list of pathnames to B<pcap(3)> dumpfiles. Blank lines and
lines beginning with the character '#' within this are ignored. All pathnames
are evaluated with respect to the working directory B<yaf> is run in. These
dumpfiles are processed in order using the same flow table, so they must be
listed in ascending time order. This option is intended to ease the use of yaf
with rotated or otherwise split B<tcpdump(1)> output.

=item B<--noerror>

Used with the B<--caplist> option.  When present, this prevents B<yaf> from
exiting when processing a list of dumpfiles in the middle due to an error in a
file.  B<yaf> will continue to process all files given in the
I<INPUT_SPECIFIER> despite errors within those files.

=item B<--live> I<LIVE_TYPE>

If present, capture packets from an interface named in the I<INPUT_SPECIFIER>.
I<LIVE_TYPE> is one of B<pcap> for packet capture via libpcap, B<pfring> for
packet capture via libpfring, or B<dag> for packet capture via an Endace DAG
interface using libdag, or B<napatech> for packet capture via a Napatech
Adapter, or B<netronome> for packet capture via a Netronome NFE card, or B<zc>
for packet capture via PF_RING ZC.  B<pfring> is only available if B<yaf> was
built with PF_RING support.  See the B<yafzcbalance(1)> man page for using
B<yaf> with PF_RING ZC. B<dag> is only available if B<yaf> was built with
Endace DAG support. B<napatech> is only available if B<yaf> was built with
Napatech API support. If I<LIVE_TYPE> is B<napatech>, the I<INPUT_SPECIFIER>
given to B<--in> should be in the form
nt3g[E<lt>streamIDE<gt>:E<lt>portsE<gt>].  StreamID and Ports are
optional. StreamID if given, is the ID that the traffic stream will be
assigned to on the incoming ports.  Ports may be a comma-separated list of
ports to listen on.  If [ports] is not specified, the default is to listen on
All ports.  StreamID defaults to 0.  B<netronome> is only available if B<yaf>
was built with Netronome API support.  If I<LIVE_TYPE> is B<netronome>, the
I<INPUT_SPECIFIER> given to B<--in> should be in the form
E<lt>deviceE<gt>:E<lt>ringE<gt> where device is the NFE card ID, typically 0.
Ring is the capture ring ID which is configured via a modprobe configuration
file and resides in /etc/modprobe.d/pcd.conf.

=item B<--export-interface>

If present, the interface on which a packet was received will be noted
internally within B<yaf>.  When flow records are exported from B<yaf>, an
C<ingressInterface> and an C<egressInterface> set of fields will be added to
the output.  The C<ingressInterface> field will be the physical interface
which captured the packet while the C<egressInterface> will be the physical
interface | 0x100.  This can be used to separate traffic based on DAG physical
ports. For use with the DAG card, traffic received on separate ports will be
separated into different flows if B<yaf> is configured with the
B<--enable-daginterface> option.  Otherwise the physical port will simply be
exported in the C<ingressInterface> or C<egressInterface> fields in the IPFIX
record (flows can exist over multiple interfaces).  This option requires
building DAG, Netronome, or Napatech support in B<yaf> with the B<--with-dag>,
B<--with-napatech>, or B<--with-netronome> switch.  In previous versions of
B<yaf> this option was enabled using the B<--dag-interface> or
B<--napatech-interface> switch.  It is now enabled by default when B<yaf> is
built with DAG, Netronome, or Napatech support.  It can be disabled by
configuring B<yaf> with B<--enable-interface=no>.  To separate traffic
received on separate ports into separate flows, you must use
B<--enable-daginterface> when configuring B<yaf>.

=item B<--filter> I<BPF_FILTER>

If present, enable Berkeley Packet Filtering (BPF) in B<yaf> with
I<BPF_FILTER> as the incoming traffic filter.  Syntax of I<BPF_FILTER> follows
the expression format described in the B<tcpdump(1)> man page.  This option is
not currently supported if B<--live> is set to B<dag> or B<napatech> or
B<netronome> as BPF filtering is implemented with libpcap.  However, you may
be able to use a BPF filter by running B<yaf> with the DAG, Napatech, or
Netronome implementations of libpcap.

=item B<--decompress> I<DECOMPRESS_DIR>

If present and the input file(s) are compressed (gzip'd), decompress the file
to a temporary file within I<DECOMPRESS_DIR>.  If B<--caplist> is also
present, all files will be decompressed to I<DECOMPRESS_DIR>.  If this option
is not present, B<yaf> will decompress files to the variable specified by the
TMPDIR environment variable or /tmp if TMPDIR is not set.  The zlib library
must be installed to use this feature.

=item B<--promisc-off>

If present, B<yaf> will not put the interface in promiscuous mode

=back

=head2 Output Options

These options control where B<yaf> will send its output. B<yaf> can write
flows to an IPFIX file or export flows to an IPFIX collector over SCTP, TCP,
and UDP.  By default, if no output options are given, B<yaf> writes an IPFIX
file to standard output.

=over 4

=item B<--out> I<OUTPUT_SPECIFIER>

I<OUTPUT_SPECIFIER> is an output specifier. If B<--ipfix> is present, the
I<OUTPUT_SPECIFIER> specifies the hostname or IP address of the collector to
which the flows will be exported. Otherwise, if B<--rotate> is present,
I<OUTPUT_SPECIFIER> is the prefix name of each output file to write
to. Otherwise, I<OUTPUT_SPECIFIER> is a filename in which the flows will be
written; the string B<-> may be used to write to standard output (the
default).

=item Examples

=over 1

=item Output to file

C<--out flows.yaf>

=item Output to collector on port 18000 at IP address 1.2.3.4

C<--out 1.2.3.4 --ipfix-port 18000 --ipfix tcp>

=item Connect to the machine identified by the domain name "host.domain.edu" on port 4803.

C<--out 4803@host.domain.edu>

=item Connect to the machine identified by the IP address "x.y.123.45" on port 18000.

C<--out x.y.123.45 --ipfix-port 18000>

=back

=item B<--ipfix> I<TRANSPORT_PROTOCOL>

If present, causes B<yaf> to operate as an IPFIX exporter, sending IPFIX
Messages via the specified transport protocol to the collector (e.g., SiLK's
B<rwflowpack(8)> or B<flowcap(8)> facilities) named in the
I<OUTPUT_SPECIFIER>.  Valid I<TRANSPORT_PROTOCOL> values are B<tcp>, B<udp>,
and B<sctp>; B<sctp> is only available if B<yaf> was built with SCTP support;
UDP is not recommended, as it is not a reliable transport protocol, and cannot
guarantee delivery of messages.  As per the recommendations in RFC 5101,
B<yaf> will retransmit templates three times within the template timeout
period (configurable using B<--udp-temp-timeout> or by default, 10 minutes).
Use the B<--ipfix-port>, B<--tls>, B<--tls-ca>, B<--tls-cert>, and
B<--tls-key> options to further configure the connection to the IPFIX
collector.

=item B<--rotate> I<ROTATE_DELAY>

If present, causes B<yaf> to write output to multiple files, opening a new
output file every I<ROTATE_DELAY> seconds in the input data. Rotated files are
named using the prefix given in the I<OUTPUT_SPECIFIER>, followed by a suffix
containing a timestamp in C<YYYYMMDDhhmmss> format, a decimal serial number,
and the file extension B<.yaf>.

=item B<--lock>

Use lockfiles for concurrent file access protection on output files.  This is
recommended for interoperating with the Airframe filedaemon facility.

=item B<--stats> I<INTERVAL>

If present, causes B<yaf> to export process statistics every I<INTERVAL>
seconds.  The default value for I<INTERVAL> is 300 seconds or every 5
minutes. B<yaf> uses IPFIX Options Templates and Records to export flow,
fragment, and decoding statistics.  If I<INTERVAL> is set to zero, stats will
not be exported.

=item B<--no-stats>

If present, B<yaf> will not export process statistics.  B<yaf> uses IPFIX
Options Templates and Records to export flow, fragment, and decoding
statistics.  B<--no-stats> takes precedence over B<--stats>.  When
B<--no-stats> is given, B<yaf> also disables export of tombstone records.

=item B<--no-tombstone>

If present, B<yaf> will not export tombstone records.  B<yaf> uses IPFIX
Options Templates and Records to export tombstone records.
Tombstone records will only be exported if stats exporting is also active.

=item B<--tombstone-configured-id> I<IDENTIFIER>

If present, overrides the default "certToolExporterConfiguredId" value in
tombstone records. This value should be less than 0xFFFF (65535). The default
value is 0.

=item B<--no-output>

If present, B<yaf> will not export IPFIX data.  It will ignore
any argument provided to B<--out>.

=item B<--daemonize>

If present, B<yaf> will run in daemon mode.

=item B<--pidfile>

Used to specify complete path to the process ID file path.

=back

=head2 Decoder Options

These options are used to modify the B<yaf> packet decoder's behavior. None of
these options are required; the default behavior for each option when not
present is noted.

=over 4

=item B<--no-frag>

If present, ignore all fragmented packets. By default, B<yaf> will reassemble
fragments with a 30 second fragment timeout.

=item B<--max-frags> I<FRAG_TABLE_MAX>

If present, limit the number of outstanding, not-yet reassembled fragments
in the fragment table to I<FRAG_TABLE_MAX> by prematurely expiring fragments
from the table. This option is provided to limit B<yaf> resource usage when
operating on data from very large networks or networks with abnormal
fragmentation. The fragment table may exceed this limit slightly due
to limits on how often B<yaf> prunes the fragment table (every 5 seconds).
By default, there is no fragment table limit, and the fragment
table can grow to resource exhaustion.

=item B<--ip4-only>

If present, ignore all IPv6 packets and export IPv4 flows only.  The default is
to process both IPv4 and IPv6 packets.

=item B<--ip6-only>

If present, ignore all IPv4 packets and export IPv6 flows only.  The default is
to process both IPv4 and IPv6 packets.

=item B<--gre-decode>

If present, attempt to decode GRE version 0 encapsulated packets. Flows will
be created from packets within the GRE tunnels. Undecodeable GRE packets will
be dropped. Without this option, GRE traffic is exported as IP protocol 47
flows. This option is presently experimental.

=item B<--vxlan-decode>

If present, attempt to decode UDP-VxLAN encapsulated packets over specified ports.
The default port is 4789. Flows will be created from packets within the VxLAN tunnels.
Undecodeable VxLAN packets will be dropped. Exports the VNI to yafLayer2SegmentId. VxLAN
VNI exporting takes precedence over Geneve VNI exporting when Geneve is also enabled.

=item B<--vxlan-decode-ports> I<PORTS_LIST>

If VxLAN decoding is enabled, only attempt to decode UDP-VxLAN encapsulated packets
if the packet's destination port is specified in I<PORTS_LIST>, a comma separated
list of ports (integers from 0 to 65535 inclusive).

=item B<--geneve-decode>

If present, attempt to decode Geneve encapsulated packets over specified ports.
The default port is 6081. Flows will be created from packets within the Geneve tunnels.
Undecodeable Geneve packets will be dropped. Exports the VNI to yafLayer2SegmentId unless
VxLAN decoding is also enabled.

=item B<--geneve-decode-ports> I<PORTS_LIST>

If Geneve decoding is enabled, only attempt to decode Geneve encapsulated packets
if the packet's destination port is specified in I<PORTS_LIST>, a comma separated
list of ports (integers from 0 to 65535 inclusive).

=back

=head2 Flow Table Options

These options are used to modify the flow table behavior within B<yaf>. None of
these options are required; the default behavior for each option when not
present is noted.

=over 4

=item B<--idle-timeout> I<IDLE_TIMEOUT>

Set flow idle timeout in seconds. Flows are considered idle and flushed
from the flow table if no packets are received for I<IDLE_TIMEOUT> seconds.
The default flow idle timeout is 300 seconds (5 minutes). Setting
I<IDLE_TIMEOUT> to 0 creates a flow for each packet.

=item B<--active-timeout> I<ACTIVE_TIMEOUT>

Set flow active timeout in seconds. Any flow lasting longer than
I<ACTIVE_TIMEOUT> seconds will be flushed from the flow table.
The default flow active timeout is 1800 seconds (30 minutes).

=item B<--udp-temp-timeout> I<TEMPLATE_TIMEOUT>

Set UDP template timeout in seconds if B<--ipfix> is set to I<udp>.  As per
RFC 5101 recommendations, B<yaf> will attempt to export templates three times
within I<TEMPLATE_TIMEOUT>.  The default template timeout period is 600
seconds (10 minutes).

=item B<--max-payload> I<PAYLOAD_OCTETS>

If present, capture at most I<PAYLOAD_OCTETS> octets from the start of each
direction of each flow. Non-TCP flows will only capture payload from the first
packet unless B<--udp-payload> is set. If not present, B<yaf> will not attempt
to capture payload. Payload capture must be enabled for payload export
(B<--export-payload>), application labeling (B<--applabel>), and entropy
evaluation (B<--entropy>). Note that payload capture is still an experimental
feature.

=item B<--max-flows> I<FLOW_TABLE_MAX>

If present, limit the number of open flows in the flow table to
I<FLOW_TABLE_MAX> by prematurely expiring the flows with the least recently
received packets; this is analogous to an adaptive idle timeout. This option
is provided to limit B<yaf> resource usage when operating on data from large
networks. By default, there is no flow table limit, and the flow table can
grow to resource exhaustion.

=item B<--udp-payload>

Enable packet payload capture for all packets in a UDP flow.  When this option
is not given, B<yaf> only captures the payload from the first packet for
non-TCP flows.  The maximum payload to capture is determined by the argument
to B<--max-payload>.

=item B<--silk>

If present, export flows in "SiLK mode". As of B<yaf> 2.0, this will export
TCP information (flags, ISN) in the main flow record instead of within the
SubTemplateMultiList.  This flag must be used when exporting to SiLK for it to
collect TCP flow information.  This also introduces the following
incompatibilities with standard IPFIX export:

=over 4

=item *

totalOctetCount and reverseTotalOctetCount are clamped to 32 bits. Any packet
that would cause either of these counters to overflow 32 bits will cause the
flow to close with flowEndReason 0x02 (active timeout), and will become the
first packet of a new flow. This is analogous to forcing an active timeout
when the octet counters overflow.

=item *

The high-order bit of the flowEndReason IE is set on any flow created on a
counter overflow, as above.

=item *

The high-order bit of the flowEndReason IE is set on any flow created on an
active timeout.

=back

Since this changes the semantics of the exported flowEndReason IE, it should
only be used when generating flows and exporting to B<rwflowpack(8)>,
B<flowcap(8)>, or writing files for processing with B<rwipfix2silk(1)>.

=item B<--force-read-all>

If present, B<yaf> will process out-of-sequence packets.  However, it will
still reject out-of-sequence fragments.

=item B<--no-vlan-in-key>

If present, B<yaf> will NOT use the VLAN ID in the flow key hash calculation
for flows.  This means that packets within the active/idle timeouts
that have the same 5-tuple (sIP, dIP, sport,
dport, protocol) but different VLAN IDs will be aggregated into 1 flow and the
VLAN ID of the first packet in each direction will be exported in the vlanId
and reverseVlanId fields.

=item B<--no-mpls>

If B<yaf> is built with Multiprotocol Label Switching (MPLS) support (use
B<yaf --version> to check), B<yaf> uses the top three MPLS labels in the MPLS
stack along with the five-tuple and VLAN ID to determine flow records, and it
exports the top three MPLS labels in the IPFIX records.  (The exported fields
will not include the experimental bits and the bottom of stack bit.)  The
B<--no-mpls> option may be used to disable the use of the MPLS labels and
export of the MPLS elements.  The switch is not available if B<yaf> was built
without MPLS support.

=back

=head2 Export Options

These options are used to modify the data exported by B<yaf>.

=over 4

=item B<--export-payload>

If present and payload capture is active (see B<--max-payload>), add
B<payload> and B<reversePayload> elements to the flow templates and export the
first I<N> octets of payload from each direction of the flow record, where
I<N> is the smaller of the arguments to B<--max-payload> and B<--max-export>.
Non-TCP flows will only export payload from the first packet. By default,
B<yaf> does not export flow payload.  See also B<--payload-applabel-select>.

=item B<--payload-applabel-select> I<APPLABEL_LIST>

Enable payload export (as B<--export-payload>) but only for the application
labels specified in I<APPLABEL_LIST>, a comma separated list of applabel
values (integers from 0 to 65535 inclusive).

=item B<--max-export> I<MAX_PAY_OCTETS>

If present and payload export is active, export at most I<MAX_PAY_OCTETS>
octets from the start of each direction of each flow, where I<MAX_PAY_OCTETS>
may not be greater than the argument to B<--max-payload>.  If B<--max-export>
is not specified, all captured payload octets are exported. Payload export is
only active when either B<--export-payload> or B<--payload-applabel-select> is
given.

=item B<--uniflow>

If present, export biflows using the Record Adjacency method in
section 3 of RFC 5103. This is useful when exporting to IPFIX
Collecting Processes that are not biflow-aware.

=item B<--mac>

If present, export MAC-layer information; presently, exports source and
destination MAC addresses.

=item B<--force-ip6-export>

If present, force IPv4 flows to be exported with IPv6-mapped IPv4 addresses in
::ffff/96. This will cause all flows to appear to be IPv6 flows.

=item B<--observation-domain> I<DOMAIN_ID>

Set the observationDomainId on each exported IPFIX message to the given
integer value. If not present, the observationDomainId defaults to 0.  This
value is also used as the exportingProcessId in the B<yaf> statistics Option
Record as a Scope Field.

=item B<--udp-uniflow> I<PORT>

If present, export each UDP packet on the given port (or 1 for all ports) as a
single flow, with flowEndReason set to YAF_END_UDPFORCE (0x1F).  This will not
close the flow. The flow will stay open until it closes naturally by the idle
and active timeouts.  Most useful with B<--export-payload> in order to export
every UDP payload on a specific port.

=item B<--flow-stats>

If present, export extra flow attributes and statistics in the
subTemplateMultiList field.  This will maintain information such as small
packet count, large packet count, nonempty packet count, average interarrival
times, total data octets, and max packet size.  See the flow statistics
template below for more information about each of the fields B<yaf> exports.

=item B<--delta>

If present, export octet and packet total counts in the delta count
information elements.  octetTotalCount will be exported in octetDeltaCount (IE
1), reverseOctetTotalCount will be exported in reverseOctetDeltaCount.
packetTotalCount will be exported in packetDeltaCount (IE 2), and
reversePacketTotalCount will be exported in reversePacketDeltaCount.

=item B<--ingress> I<INGRESS_INT>

If present, set the ingressInterface field in the flow template to
I<INGRESS_INT>.  This field will also be populated if B<yaf> was configured
with B<--enable-daginterface> or B<--enable-napatechinterface> or
B<--with-bivio.> If yaf is running on a dag, napatech, or bivio, and the
physical interface is available, this value will override I<INGRESS_INT>.

=item B<--egress> I<EGRESS_INT>

If present, set the egressInterface field in the flow template to
I<EGRESS_INT>.  This field will also be populated if B<yaf> was configured
with B<--enable-daginterface> or B<--enable-napatechinterface> or
B<--with-bivio.> If yaf is running on a dag, napatech, or bivio, and the
physical interface is available, this value will override I<EGRESS_INT>.

=item B<--no-element-metadata>

If present, disable the export of information element metadata (see B<RFC
5610>) before data records.

=item B<--no-template-metadata>

If present, disable the export of template metadata (name, description, and
other data) before data records.

=back

=head2 Application Labeler / Deep Packet Inspection Options

If B<yaf> is built with application labeler support enabled (using the
B<--enable-applabel> option to B<./configure> when B<yaf> is built), then
B<yaf> can examine packet payloads and determine the application protocol
in use within a flow, and export a 16-bit application label with
each flow.

Additionally, if B<yaf> is built with deep packet inspection support enabled
(using the B<--enable-dpi> option to B<./configure> when B<yaf> is built), then
B<yaf> can examine packet payloads, capture useful information for a specific
protocol, and export it in a protocol-specific template within a
SubTemplateList.

The exported application label uses the common port number for the
protocol.  For example, HTTP traffic, independent of what port the
traffic is detected on, will be labeled with a value of 80, the
default HTTP port.

Application labeling and DPI requires payload capture to be enabled with the
B<--max-payload> option. A minimum payload capture length of 384
octets is recommended for best results.

=over 4

=item B<--dpi-rules-file> I<RULES_FILE>

Read applabel and deep packet inspection rules from I<RULES_FILE>. If not
present, rules are read by default from F<@prefix@/etc/yafDPIRules.conf>.

=item B<--applabel>

If present, export application label data. Requires B<--max-payload>
to enable payload capture.

=item B<--dpi>

If present, export deep packet inspection data and application label data.
Requires B<--max-payload> to enable payload capture.

=item B<--dpi-select> I<APPLABEL_LIST>

By default B<yaf> will enable DPI for all applabels, but this flag can be used
to provide a comma separated list of which applabels DPI processing should be
run on.

=back

=head2 nDPI Options

nDPI is a version of OpenDPI as maintained by ntop.  You can read more
about nDPI and the applications supported at:
http://www.ntop.org/products/deep-packet-inspection/ndpi/

If B<yaf> is built with nDPI support enabled (using the B<--with-ndpi>
option to B<./configure> when B<yaf> is built), then B<yaf> can examine
packet payloads and determine the application protocol in use within a flow,
and export the application protocol and sub-protocol with each flow.

nDPI requires payload capture to be enabled with the B<--max-payload> option.
A minimum payload capture length of 384 octets is recommended for best results.

=over 4

=item B<--ndpi>

If present, export nDPI data. Requires B<--max-payload> to enable payload
capture.

=item B<--ndpi-protocol-file> I<FILE>

Specify protocol file for sub-protocol and port-based protocol detection

=back


=head2 Entropy Measurement

If B<yaf> is built with entropy measurement enabled (using the
B<--enable-entropy> option to B<./configure> when B<yaf> is built,)
then B<yaf> can examine the packet payloads and determine a Shannon
Entropy value for the payload.  The entropy calculation does not
include the network (IP) or transport (UDP/TCP) headers.  The entropy
is calculated in terms of bits per byte, (log base 2.)  The
calculation generates a real number value between 0.0 and 8.0.  That
number is then converted into an 8-bit integer value between 0 and
255.  Roughly, numbers above 230 are generally compressed (or encrypted)
and numbers centered around approximately 140 are English text.  Lower
numbers carry even less information content.  Another useful piece of
information is that SSL/TLS tends to zero pad its packets, which causes
the entropy of those flows to drop quite low.

=over 4

=item B<--entropy>

If present, export the entropy values for both the forward and reverse
payloads.  Requires the B<--max-payload> option to operate.

=back


=head2 IPFIX Connection Options

These options are used to configure the connection to an IPFIX collector.

=over 4

=item B<--ipfix-port> I<PORT>

If B<--ipfix> is present, export flows to TCP, UDP, or SCTP port I<PORT>.
If not present, the default IPFIX port 4739 is used. If B<--tls> is also
present, the default secure IPFIX port 4740 is used.

=item B<--tls>

If B<--ipfix> is present, use TLS to secure the connection to the
IPFIX collector. Requires the I<TRANSPORT_PROTOCOL> to be B<tcp>, as DTLS over
UDP or SCTP is not yet supported. Requires the B<--tls-ca>, B<--tls-cert>, and
B<--tls-key> options to specify the X.509 certificate and TLS key information.

=item B<--tls-ca> I<CA_PEM_FILE>

Use the Certificate Authority or Authorities in I<CA_PEM_FILE> to verify the
remote IPFIX Collecting Process' X.509 certificate. The connection to the
Collecting Process will fail if its certificate was not signed by this CA
(or by a certificate signed by this CA, recursively); this prevents export to
unauthorized Collecting Processes. Required if B<--tls> is present.

=item B<--tls-cert> I<CERT_PEM_FILE>

Use the X.509 certificate in I<CERT_PEM_FILE> to identify this IPFIX Exporting
Process. This certificate should contain the public part of the private key in
I<KEY_PEM_FILE>. Required if B<--tls> is present.

=item B<--tls-key> I<KEY_PEM_FILE>

Use the private key in I<KEY_PEM_FILE> for this IPFIX Exporting Process. This
key should contain the private part of the public key in
I<CERT_PEM_FILE>. Required if B<--tls> is present. If the key is encrypted,
the password must be present in the YAF_TLS_PASS environment variable.

=back

=head2 Privilege Options

These options are used to cause B<yaf> to drop privileges when running as root
for live capture purposes.

=over 4

=item B<--become-user> I<UNPRIVILEGED_USER>

After opening the live capture device in B<--live> mode, drop
privilege to the named user. Using B<--become-user> requires B<yaf> to
be run  as root or setuid root. This option will cause all files
written by B<yaf> to be owned by the user I<UNPRIVILEGED_USER> and the
user's primary group; use B<--become-group> as well to change the group
B<yaf> runs as for output purposes.

If running as root for live capture purposes and B<--become-user> is not
present, B<yaf> will warn that privilege is not being dropped. We highly
recommend the use of this option, especially in production environments,
for security purposes.

=item B<--become-group> I<UNPRIVILEGED_GROUP>

B<--become-group> can be used to change the group from the default of
the user given in B<--become-user>.  This option has no effect if
given without the B<--become-user> option as well.

=back

=head2 PCAP Options

These options are used to turn on and configure B<yaf>'s PCAP export
capability.

=over 4

=item B<--pcap> I<PCAP_FILE_PREFIX>

This option turns on rolling PCAP export in B<yaf>.  It will capture and write
packets for all network traffic B<yaf> has received and processed to PCAP
files with the given I<PCAP_FILE_PREFIX>.  B<yaf> will not create file
directories. If B<yaf> can't write to the file, B<yaf> will turn off PCAP
export. Pcap files will have names in the form of
PCAP_FILE_PREFIX[datetime]_serialno.pcap".  B<yaf> will write to a file until
the file size has reached B<--max-pcap> or every B<--pcap-timer> seconds
(whichever happens first). By default, B<yaf> rotates files every 5 MB. Files
will be "locked" (".lock" will be appended to the filename) until B<yaf> has
closed the file. Be aware that your Operating System will have a limit on the
maximum number of files in a directory and a maximum file size.  If this limit
is reached, B<yaf> will write warning messages and terminate PCAP export.
This may effect flow generation if B<yaf> is also writing IPFIX files.
Optionally, you can also export meta information about the flows in each
rolling PCAP file with the B<--pcap-meta-file> switch. If B<--pcap> is used in
conjunction with B<--hash> and B<--stime>, the I<PCAP_FILE_PREFIX> should be
the name of the PCAP file to write to (it will not be used as a file prefix).

=item B<--pcap-per-flow>

If present, B<yaf> will write a pcap file for each flow in the output
directory given to B<--pcap>.  PCAP_FILE_PREFIX given to B<--pcap> must be
a file directory.  This option is experimental and should only be
used when reading pcap files of reasonable size.  B<yaf> only writes up to
B<--max-payload> bytes of each packet to the pcap file.  Therefore,
B<--max-payload> must be set to an appropriate size to prevent packets from
being truncated in the pcap file.  B<yaf> will use the
last three digits of the flowStartMilliseconds as the directory and the
flow key hash, flowStartMilliseconds, and serial number as the filename.
See the included
B<getFlowKeyHash> program to easily calculate the name of the file for a given
flow.  When the pcap file has reached B<--max-pcap> size, B<yaf> will close
the file, increment the serial number, and open a new pcap file with the same
naming convention. Note that your operating system has a limit to the number
of open file handles B<yaf> can maintain at any given time.  Therefore, the
performance of B<yaf> degrades when the number of open flows is greater than
the maximum number of file handles.

=item B<--max-pcap> I<MAX_FILE_MB>

If present, set the maximum file size of pcap files to I<MAX_FILE_MB> MB.
The default is 5 MB.

=item B<--pcap-timer> I<PCAP_ROTATE_DELAY>

If present, B<yaf> will rotate rolling pcap files every I<PCAP_ROTATE_DELAY>
seconds or when the file reaches B<--max-pcap> size, whichever happens first.
By default, B<yaf> only rotates files based on file size.

=item B<--pcap-meta-file> I<META_FILENAME>

If present and B<--pcap> is also present, B<yaf> will export metadata
on the flows contained in
each rolling pcap file B<yaf> is writing to the filename specified by
I<META_FILENAME>.  B<yaf> will write a line in the form:

=over 1

=item I<flow_key_hash | flowStartMilliseconds | pcap_file_name>

=back

for each flow in the pcap.  If a flow exists across 3 pcap
files, there will be 3 lines in I<META_FILENAME> for that flow (each line
having a different filename).  The pcap-meta-file will rotate approximately
every 4,500,000 lines (or approx 2G).  A new file will be created in the form
I<META_FILENAME>[datetime]_serialno.meta.
This file can be uploaded to a database for flow correlation and flow-to-pcap
analysis.

If B<--pcap-meta-file> is present and B<--pcap> is not present,
B<yaf> will export information about the
pcap file(s) it is presently reading, as opposed to the pcap files B<yaf> is writing.

=item B<--index-pcap>

If present and B<--pcap> and B<--pcap-meta-file> are also present,
export offset and length information about the packets B<yaf> is
writing to the rolling pcap files.  This option can also be used when B<--pcap>
is not present, in which case it will write information about the file it
is reading.  Adding this option will force
B<yaf> to write one line per packet to the B<pcap-meta-file> in the form:

=over 1

=item I<flow_key_hash | flowStartMilliseconds | pcap_file_name/file_num | offset | length>

=back

If B<--pcap> is present, the C<pcap_file_name> is the name of the PCAP file
B<yaf> is writing.  Otherwise, C<file_num> will represent the sequential file
number that B<yaf> has processed.  If B<yaf>
was given a single pcap file, this number will always be 0.
C<offset> is the offset into the pcap file of the beginning of the packet,
at the start of the pcap packet header. C<length> is the length of the packet including
the pcap packet header.
Using this offset, a separate program, such as B<yafMeta2Pcap>,  will be
able to quickly extract packets
for a flow. This file only rotates if I<META_FILE> reaches max size.

=item B<--hash> I<FLOW_KEY_HASH>

If present, only write PCAP data for the flow(s) with I<FLOW_KEY_HASH>.
This option is only valid with the B<--pcap> option.

=item B<--stime> I<FLOW_START_TIMEMS>

If present, only write PCAP data for the flow(s) with I<FLOW_START_TIMEMS>
and I<FLOW_KEY_HASH> given to B<--hash>.  This option is only valid
when used with the B<--hash> and B<--pcap> options.

=back

=head2 Logging Options

These options are used to specify how log messages are routed. B<yaf> can
log to standard error, regular files, or the UNIX syslog facility.

=over 4

=item B<--log> I<LOG_SPECIFIER>

Specifies destination for log messages. I<LOG_SPECIFIER> can be a syslog(3)
facility name, the special value B<stderr> for standard error, or the
I<absolute> path to a file for file logging. The default log
specifier is B<stderr> if available and B<yaf> is not running as a daemon,
B<user> otherwise.

=item B<--loglevel> I<LOG_LEVEL>

Specify minimum level for logged messages. In increasing levels of verbosity,
the supported log levels are B<quiet>, B<error>, B<critical>, B<warning>,
B<message>, B<info>, and B<debug>. The default logging level is B<warning>.

=item B<--verbose>

Equivalent to B<--loglevel debug>.

=item B<--version>

If present, print version and copyright information to standard error and exit.

=back

=head2 Plugin Options

These options are used to load, configure, and run a B<yaf> plugin.

=over 4

=item B<--plugin-name> I<LIBPLUGIN_NAME[,LIBPLUGIN_NAME...]>

Specify the plugin to load.  The loaded plugin must follow the B<yaf> plugin
framework.  I<LIBPLUGIN_NAME> must be the full path to the plugin library name.
One plugin is included with B<yaf>, a DHCP Fingerprinting plugin. This flag
will only be recognized if B<yaf> is configured with B<--enable-plugins>. There
are also configure options to export only DNS Authoritative and NXDomain
responses. Read the plugin's documentation for more information.

=item B<--plugin-opts> I<"OPTIONS[,OPTIONS...]">

Specify the arguments to the plugin given to B<--plugin-name>. This flag will
only be recognized if B<yaf> is configured with B<--enable-plugins> and
B<--plugin-name> is set to a valid plugin.

=item B<--plugin-conf> I<CONF_FILE_PATH[,CONF_FILE_PATH...]>

Specify the path to a configuration file for the plugin given to
B<--plugin-name>. This flag will only be recognized if B<yaf> is configured
with B<--enable-plugins> and B<--plugin-name> is set to a valid plugin. If this
switch is not used, but the plugin requires a configuration file, the default
location F<@prefix@/etc> will be used.

=back


=head2 Passive OS Fingerprinting (p0f)

These options are used to enable p0f in B<yaf>. p0f is presently experimental.
There is no support in B<yafscii> or SiLK for printing p0f related data.
Currently, B<yaf> uses the p0f Version 2 SYN fingerprints (see p0f.fp).

=over 4

=item B<--p0fprint>

If present, export p0f data.  This data consists of three related information
elements; osName, osVersion, osFingerprint.  This flag requires B<yaf> to be
configured with B<--with-p0f>.

=item B<--p0f-fingerprints>

Location of the p0f fingerprint file(s), p0f.fp.  Default
is F<@prefix@/etc/p0f.fp>.  This version of B<yaf> includes the updated CERT p0f
fingerprints.  See L<https://tools.netsa.cert.org/p0f/index.html> for updates.

=item B<--fpexport>

If present, enable export of handshake headers for external OS fingerprinters.
The related information elements are firstPacketBanner and secondPacketBanner.
This flag requires B<yaf> to be configured with B<--enable-fpexporter>.

=back

=head1 OUTPUT

=head2 Basic Flow Record

B<yaf>'s output consists of an IPFIX message stream. B<yaf> uses a variety of
templates for IPFIX data records; the information elements that may appear
in these templates are enumerated below. For further information about the IPFIX
information model and IPFIX message stream, see B<RFC 5102>, B<RFC 5101>, and
B<RFC 5103>.  As of B<yaf> 2.0, B<yaf> nests some templates in an IPFIX
subTemplateMultiList.  In order to retain compatibility with the SiLK Tools,
use B<--silk> to prevent B<yaf> from nesting TCP Information Elements.  Below
are descriptions of each of the templates B<yaf> will export.  See the
Internet-Draft B<Export of Structured Data in IPFIX> for more information on IPFIX lists.

B<yaf> assigns information element numbers to reverse flow elements in biflow
capture based on the standard IPFIX PEN 29305.  This applies only for
information elements defined in the standard IPFIX Information Model
(B<RFC 5102>) that do not have a reverse information element already defined.
For information elements defined under the CERT PEN, a standard method is
used to calculate their reverse element identifier.  The method is that
bit fourteen is set to one in the IE field, (e.g. 16384 + the forward IE number.)

=over 4

=item B<flowStartMilliseconds> IE 152, 8 octets, unsigned

Flow start time in milliseconds since 1970-01-01 00:00:00 UTC. Always present.

=item B<flowEndMilliseconds> IE 153, 8 octets, unsigned

Flow end time in milliseconds since 1970-01-01 00:00:00 UTC. Always present.

=item B<octetTotalCount> IE 85, 8 octets, unsigned

Number of octets in packets in forward direction of flow. Always present
(unless C<--delta> is used.) May be encoded in 4 octets using IPFIX
reduced-length encoding.

=item B<reverseOctetTotalCount> Reverse (PEN 29305) IE 85, 8 octets, unsigned

Number of octets in packets in reverse direction of flow. Present if flow
has a reverse direction. May be encoded in 4 octets using IPFIX
reduced-length encoding.

=item B<packetTotalCount> IE 86, 8 octets, unsigned

Number of packets in forward direction of flow. Always present
(unless C<--delta> is used.) May be encoded in 4 octets
using IPFIX reduced-length encoding.

=item B<reversePacketTotalCount> Reverse (PEN 29305) IE 86, 8 octets, unsigned

Number of packets in reverse direction of flow. Present if flow has a
reverse direction. May be encoded in 4 octets using IPFIX reduced-length
encoding.

=item B<octetDeltaCount> IE 1, 8 octets, unsigned

Number of octets in packets in forward direction of flow.  Only
present if C<--delta> is used. May be encoded in 4 octets using IPFIX
reduced-length encoding.

=item B<reverseOctetDeltaCount> Reverse (PEN 29305) IE 1, 8 octets, unsigned

Number of octets in reverse direction of flow.  Only present if C<--delta>
is used and non-zero.  May be encoded in 4 octets using IPFIX
reduced-length encoding.

=item B<packetDeltaCount> IE 2, 8 octets, unsigned

Number of packets in forward direction of flow. Only present if C<--delta>
is used.  May be encoded in 4 octets using IPFIX reduced-length encoding.

=item B<reversePacketDeltaCount> Reverse (PEN 29305) IE 2, 8 octets, unsigned

Number of packets in reverse direction of flow.  Only present if
C<--delta> is used and non-zero.  May be encoded in 4 octets using IPFIX
reduced-length encoding.

=item B<reverseFlowDeltaMilliseconds> CERT (PEN 6871) IE 21, 4 octets, unsigned

Difference in time in milliseconds between first packet in forward direction
and first packet in reverse direction. Correlates with (but does not
necessarily represent) round-trip time. Present if flow has a reverse
direction.

=item B<sourceIPv4Address> IE 8, 4 octets, unsigned

IPv4 address of flow source or biflow initiator. Present for IPv4
flows without IPv6-mapped addresses only.

=item B<destinationIPv4Address> IE 12, 4 octets, unsigned

IPv4 address of flow source or biflow responder. Present for IPv4
flows without IPv6-mapped addresses only.

=item B<sourceIPv6Address> IE 27, 16 octets, unsigned

IPv6 address of flow source or biflow initiator. Present for IPv6
flows or IPv6-mapped IPv4 flows only.

=item B<destinationIPv6Address> IE 28, 16 octets, unsigned

IPv6 address of flow source or biflow responder. Present for IPv6
flows or IPv6-mapped IPv4 flows only.

=item B<sourceTransportPort> IE 7, 2 octets, unsigned

TCP or UDP port on the flow source or biflow initiator endpoint.
Always present.

=item B<destinationTransportPort> IE 11, 2 octets, unsigned

TCP or UDP port on the flow destination or biflow responder endpoint.
Always present. For ICMP flows, contains ICMP type * 256 + ICMP code.
This is non-standard, and an open issue in B<yaf>.

=item B<flowAttributes> CERT (PEN 6871) IE 40, 2 octets, unsigned

Miscellaneous flow attributes for the forward direction of the flow.
Always present (B<yaf> 2.1 or later).  Current flag values:

=over 2

=item Bit 1: All packets in the forward direction have fixed size

For TCP flows, only packets that have payload will be considered (to avoid
TCP handshakes and teardowns).

=item Bit 2: Packet(s) in the forward direction was received out-of-sequence

=item Bit 3: Host may be MP_CAPABLE (MPTCP-capable)

For TCP flows, this bit will be set if a packet in the flow was seen that
had the MP_CAPABLE TCP option or attempted an MP_JOIN operation.

=back

=item B<reverseFlowAttributes> CERT (PEN 6871) IE 16424, 2 octets, unsigned

Miscellaneous flow attributes for the reverse direction of the flow.
Always present (B<yaf> 2.1 or later).  Current flag values:

=over 2

=item Bit 1: All packets in the reverse direction have fixed size

=item Bit 2: Packet(s) in the reverse direction was received out-of-sequence

=item Bit 3: Host may be MP_CAPABLE (MPTCP-capable)

For TCP flows, this bit will be set if a packet in the flow was seen that
had the MP_CAPABLE TCP option or attempted an MP_JOIN operation.

=back

=item B<protocolIdentifier> IE 4, 1 octet, unsigned

IP protocol of the flow. Always present.

=item B<flowEndReason> IE 136, 1 octet, unsigned

Flow end reason code, as defined by the IPFIX Information Model.
Always present. In B<--silk> mode, the high-order bit is set if the flow
was created by continuation.

=item B<silkAppLabel> CERT (PEN 6871) IE 33, 2 octets, unsigned

Application label, defined as the primary well-known port associated
with a given application. Present if the application labeler is
enabled, and was able to determine the application protocol used
within the flow.

=item B<vlanId> IE 58, 2 octets, unsigned

802.1q VLAN tag of the first packet in the forward direction of the flow.

=item B<reverseVlanId> Reverse (PEN 29305) IE 58, 2 octets, unsigned

802.1q VLAN tag of the first packet in the reverse direction of the flow.
Present if the flow has a reverse direction.

=item B<ipClassOfService> IE 5, 1 octet, unsigned

For IPv4 packets, this is the value of the TOS field in the IPv4 header.  For
IPv6 packets, this is the Traffic Class field in the IPv6 header.

=item B<reverseIpClassOfService> Reverse (PEN 29305) IE 5, 1 octet, unsigned

The TOS field in the IPv4 header for packets in the reverse direction, and
Traffic Class field in the IPv6 header for packets in the reverse direction.

=item B<payloadEntropy> CERT (PEN 6871) IE 35, 1 octet, unsigned

Shannon Entropy calculation of the forward payload data. This element is
contained in the B<yaf> Entropy template within the subTemplateMultiList.

=item B<reversePayloadEntropy> CERT (PEN 6871) IE 16419, 1 octet, unsigned

Shannon Entropy calculation of the reverse payload data.  This element is
contained in the B<yaf> Entropy template within the subTemplateMultiList.

=item B<mptcpInitialDataSequenceNumber>, CERT (PEN 6871) IE 289, 8 octets, unsigned

The initial data sequence number found in the MPTCP Data Sequence Signal (DSS)
Option.

=item B<mptcpReceiverToken>, CERT (PEN 6871) IE 290, 4 octets, unsigned

The token used to identify an MPTCP connection over multiple subflows.  This
value is found in the MP_JOIN TCP Option for the initial SYN of a subflow.

=item B<mptcpMaximumSegmentSize>, CERT (PEN 6871) IE 291, 2 octets, unsigned

The maximum segment size reported in the Maximum Segment Size TCP Option.
This should be consistent over all subflows.

=item B<mptcpAddressId>, CERT (PEN 6871), IE 292, 1 octet, unsigned

The address ID of the subflow found in the SYN/ACK of an MP_JOIN operation.

=item B<mptcpFlags>, CERT (PEN 6871), IE 293, 1 octet, unsigned

Various MPTCP Values:

=over 2

=item Bit 1: Priority was changed during the life of the subflow (MP_PRIO was seen)

=item Bit 2: Subflow has priority at setup (backup flag was not set at initialization).

=item Bit 3: Subflow failed. (MP_FAIL option was seen).

=item Bit 4: Subflow experienced fast close. (MP_FASTCLOSE options was seen).

=back

=item B<sourceMacAddress>, IE 56, 6 octets, unsigned

Source MAC Address of the first packet in the forward direction of the flow.
This element is contained in the B<yaf> MAC template within the subTemplateMultiList.

=item B<destinationMacAddress>, IE 80, 6 octets, unsigned

Destination MAC Address of the first packet in the reverse direction of the flow. This element is contained in the B<yaf> MAC template within the subTemplateMultiList.

=item B<osName> CERT (PEN 6871) IE 36, variable-length

p0f OS Name for the forward flow based on the SYN packet and p0f SYN Fingerprints.  Present only if p0f is enabled.  This element is contained in the B<yaf>
p0f template within the subTemplateMultiList.

=item B<reverseOsName> CERT (PEN 6871) IE 16420, variable-length

p0f OS Name for the reverse flow based on the SYN packet and p0f SYN Fingerprints.  Present only if p0f is enabled. This element is contained in the B<yaf>
p0f template within the subTemplateMultiList.

=item B<osVersion> CERT (PEN 6871) IE 37, variable-length

p0f OS Version for the forward flow based on the SYN packet and p0f SYN Fingerprints.  Present only if p0f is enabled. This element is contained in the
B<yaf> p0f template within the subTemplateMultiList.

=item B<reverseOsVersion> CERT (PEN 6871) IE 16421, variable-length

p0f OS Version for the reverse flow based on the SYN packet and p0f SYN fingerprints.  Present only if p0f is enabled. This element is contained in the
B<yaf> p0f template within the subTemplateMultiList.

=item B<osFingerprint> CERT (PEN 6871) IE 107, variable-length

p0f OS Fingerprint for the forward flow based on the SYN packet and p0f SYN fingerprints.  Present only if p0f is enabled. This element is contained in the B<yaf> p0f template within the subTemplateMultiList.

=item B<reverseOsFingerprint> CERT (PEN 6871) IE 16491, variable-length

p0f OS Fingerprint for the reverse flow based on the SYN packet and p0f SYN Fingerprints. Present only if p0f is enabled. This element is contained in the B<yaf> p0f template within the subTemplateMultiList.

=item B<firstPacketBanner> CERT (PEN 6871) IE 38, variable-length

IP and transport headers for first packet in forward direction to be used for external OS Fingerprinters.  Present only if fpexport is enabled. This element is contained in the B<yaf> FPExport template within the subTemplateMultiList.

=item B<reverseFirstPacketBanner> CERT (PEN 6871) IE 16422, variable-length

IP and transport headers for first packet in reverse direction to be used for external OS Fingerprinters.  Present only if fpexport is enabled. This element is contained in the B<yaf> FPExport template within the subTemplateMultiList.

=item B<secondPacketBanner> CERT (PEN 6871) IE 39, variable-length

IP and transport headers for second packet in forward direction (third packet in sequence) to be used for external OS Fingerprinters.  Present only if fpexport is enabled. This element is contained in the B<yaf> FPExport template within the subTemplateMultiList.

=item B<reverseSecondPacketBanner> CERT (PEN 6871) IE 16423, variable-length

IP and transport headers for second packet in reverse direction (currently not used).  Present only if fpexport is enabled. This element is contained in the B<yaf> FPExport template within the subTemplateMultiList.

=item B<payload> CERT (PEN 6871) IE 18, variable-length

Initial I<n> bytes of forward direction of flow payload.
Present if payload collection is enabled and payload is present
in the forward direction of the flow. This element is contained in the
B<yaf> Payload template within the subTemplateMultiList.

=item B<reversePayload> CERT (PEN 6871) IE 16402, variable-length

Initial I<n> bytes of reverse direction of flow payload.
Present if payload collection is enabled and payload is present
in the reverse direction of the flow. This element is contained in the B<yaf>
Payload template within the subTemplateMultiList.

=item B<ingressInterface> IE 10, 4 octets, unsigned

The index of the IP interface where packets of this flow are being received.
Use B<--ingress,> B<--napatech-interface,> B<--dag-interface> or configure B<yaf> with
bivio for this field to be present in the flow template.  Use B<--ingress> to
manually set this field.

=item B<egressInterface> IE 14, 4 octets, unsigned

The index of the IP interface where packets of this flow are being received.
Use B<--egress,> B<--napatech-interface,> B<--dag-interface> or configure B<yaf> with
bivio for this field to be present in the flow template. If using napatech, dag,
or bivio, C<egressInterface> will be the physical interface | 0x100.  Use B<--egress>
to manually set this field.

=item B<yafLayer2SegmentId> CERT (PEN 6871) IE 934, 4 octets, unsigned

Identifier of a layer 2 network segment in an overlay network.
Present only if VXLAN decoding is enabled. The most significant byte identifies the
layer 2 network overlay network encapsulation type:

=over 2

=item 0x00: Reserved

=item 0x01: VxLAN

=item 0x02: NVGRE

=item 0x03: Geneve

=back

The three lowest significant bytes hold the value of the layer 2 overlay network segment identifier.

=item B<dataByteCount> CERT (PEN 6871) IE 502, 8 octets, unsigned

Total bytes transferred as payload.

=item B<averageInterarrivalTime> CERT (PEN 6871) IE 503, 8 octets, unsigned

Average number of milliseconds between packets.

=item B<standardDeviationInterarrivalTime> CERT (PEN 6871) IE 504, 8 octets, unsigned

Standard deviation of the interarrival time for up to the first ten packets.

=item B<tcpUrgTotalCount> IE 223, 4 octets, unsigned

The number of TCP packets that have the URGENT Flag set.

=item B<smallPacketCount> CERT (PEN 6871) IE 500, 4 octets, unsigned

The number of packets that contain less than 60 bytes of payload.

=item B<nonEmptyPacketCount> CERT (PEN 6871) IE 501, 4 octets, unsigned

The number of packets that contain at least 1 byte of payload.

=item B<largePacketCount> CERT (PEN 6871) IE 510, 4 octets, unsigned

The number of packets that contain more than 225 bytes of payload.

=item B<firstNonEmptyPacketSize> CERT (PEN 6871) IE 505, 2 octets, unsigned

Payload length of the first non-empty packet.

=item B<maxPacketSize> CERT (PEN 6871) IE 506, 2 octets, unsigned

The largest payload length transferred in the flow.

=item B<standardDeviationPayloadLength> CERT (PEN 6871) IE 508, 2 octets, unsigned

The standard deviation of the payload length for up to the first 10 non empty
packets.

=item B<firstEightNonEmptyPacketDirections> CERT (PEN 6871) IE 507, 1 octet, unsigned

Represents directionality for the first 8 non-empty packets. 0 for forward
direction, 1 for reverse direction.

=item B<reverseDataByteCount> CERT (PEN 6871) IE 16886, 8 octets, unsigned

Total bytes transferred as payload in the reverse direction.

=item B<reverseAverageInterarrivalTime> CERT (PEN 6871) IE 16887, 8 octets, unsigned

Average number of milliseconds between packets in reverse direction.

=item B<reverseStandardDeviationInterarrivalTime> CERT (PEN 6871) IE 16888, 8 octets, unsigned

Standard deviation of the interarrival time for up to the first ten packets
in the reverse direction.

=item B<reverseTcpUrgTotalCount> Reverse (PEN 29305), IE 223, 4 octets, unsigned

The number of TCP packets that have the URGENT Flag set in the reverse
direction.

=item B<reverseSmallPacketCount> CERT (PEN 6871) IE 16884, 4 octets, unsigned

The number of packets that contain less than 60 bytes of payload in reverse
direction.

=item B<reverseNonEmptyPacketCount> CERT (PEN 6871) IE 16885, 4 octets, unsigned

The number of packets that contain at least 1 byte of payload in reverse
direction.

=item B<reverseLargePacketCount> CERT (PEN 6871) IE 16894, 4 octets, unsigned

The number of packets that contain more than 225 bytes of payload in the
reverse direction.

=item B<reverseFirstNonEmptyPacketSize> CERT (PEN 6871) IE 16889, 2 octets, unsigned

Payload length of the first non-empty packet in the reverse direction.

=item B<reverseMaxPacketSize> CERT (PEN 6871) IE 16890, 2 octets, unsigned

The largest payload length transferred in the flow in the reverse direction.

=item B<reverseStandardDeviationPayloadLength> CERT (PEN 6871) IE 16892, 2 octets, unsigned

The standard deviation of the payload length for up to the first 10 non empty
packets in the reverse direction.

=item B<tcpSequenceNumber> IE 184, 4 octets, unsigned

Initial sequence number of the forward direction of the flow. Present if
the flow's protocolIdentifier is 6 (TCP).  This element is contained in the
B<yaf> TCP template within the subTemplateMultiList unless B<--silk> is used.

=item B<reverseTcpSequenceNumber> Reverse (PEN 29305) IE 184, 4 octets, unsigned

Initial sequence number of the reverse direction of the flow. Present if the
flow's protocolIdentifier is 6 (TCP) and the flow has a reverse direction.
This element is contained in the B<yaf> TCP template within the subTemplateMultiList unless B<--silk> is used.

=item B<initialTCPFlags> CERT (PEN 6871) IE 14, 1 octet, unsigned

TCP flags of initial packet in the forward direction of the flow.
Present if the flow's protocolIdentifier is 6 (TCP). This element is contained
in the B<yaf> TCP template within the subTemplateMultiList unless B<--silk> is used.

=item B<unionTCPFlags> CERT (PEN 6871) IE 15, 1 octet, unsigned

Union of TCP flags of all packets other than the initial packet
in the forward direction of the flow. Present if the flow's
protocolIdentifier is 6 (TCP). This element is contained in the
B<yaf> TCP template within the subTemplateMultiList unless B<--silk> is used.

=item B<reverseInitialTCPFlags> CERT (PEN 6871) IE 16398, 1 octet, unsigned

TCP flags of initial packet in the reverse direction of the flow.
Present if the flow's protocolIdentifier is 6 (TCP) and the flow
has a reverse direction. This element is contained in the
B<yaf> TCP template within the subTemplateMultiList unless B<--silk> is used.

=item B<reverseUnionTCPFlags> CERT (PEN 6871) IE 16399, 1 octet, unsigned

Union of TCP flags of all packets other than the initial packet
in the reverse direction of the flow. Present if the flow's
protocolIdentifier is 6 (TCP) and the flow has a reverse direction.
This element is contained in the B<yaf> TCP template within the subTemplateMultiList unless B<--silk> is used.

=item B<mplsTopLabelStackSection> IE 70, 3 octets

The MPLS Label from the top of the MPLS label stack entry.  B<yaf>
does not include the Experimental bits and Bottom of the Stack bit in the
export field.  B<yaf> must have been enabled with MPLS support for export
of this field.  Note that this field is defined as an octet array in the
default libfixbuf Information Model.  B<yaf> uses the length override
feature in libfixbuf to redefine it from variable length to 3 bytes.

=item B<mplsLabelStackSection2>, IE 71, 3 octets

The MPLS Label from the MPLS label stack entry immediately before the top
entry.  B<yaf> does not include the Experimental bits and Bottom of the Stack bit in the
export field.  B<yaf> must have been enabled with MPLS support for export
of this field.  Note that this field is defined as an octet array in the
default libfixbuf Information Model.  B<yaf> uses the length override
feature in libfixbuf to redefine it from variable length to 3 bytes.

=item B<mplsLabelStackSection3>, IE 72, 3 octets

The MPLS Label from the third entry in the MPLS label stack.
B<yaf> does not include the Experimental bits and Bottom of the Stack bit in the
export field.  B<yaf> must have been enabled with MPLS support for export
of this field.  Note that this field is defined as an octet array in the
default libfixbuf Information Model.  B<yaf> uses the length override
feature in libfixbuf to redefine it from variable length to 3 bytes.


=item B<subTemplateMultiList> IE 293, variable length

Represents a list of zero or more instances of a structured data type, where
the data type of each list element can be different and corresponds with
different template definitions.  The Information Element Number will change
upon updates to the IPFIX lists specification and libfixbuf releases.

=back


=head2 Hooks Templates

B<yaf> can export other templates within the subTemplateMultiList
if plugins are enabled in B<yaf>.  See B<yafdpi(1)> for descriptions
of the B<yaf> Deep Packet Inspection Information Elements.  See B<yafdhcp(1)>
for descriptions of the DHCP Fingerprint Information Elements.

=head2 Flow Statistics Template

B<yaf> can maintain and export more information about each flow than what
is exported in the Basic Flow Template.  If B<yaf> is run with B<--flow-stats>
B<yaf> will export the following attributes with every flow as long as one
of the following characteristics is nonzero. The following flow attributes
have been known to help in traffic classification.

=head2 Statistics Options Template

B<yaf> will export information about its process periodically
using IPFIX Options Template Record.  This record gives information
about the status of the flow and fragment table, as well as decoding
information.  This can be turned off using the B<--no-stats> option.
The following Information Elements will be exported:

=over 4

=item B<systemInitTimeMilliseconds> IE 161, 8 octets, unsigned

The time in milliseconds of the last (re-)initialization of B<yaf>.

=item B<exportedFlowRecordTotalCount> IE 42, 8 octets, unsigned

Total amount of exported flows from B<yaf> start time.

=item B<packetTotalCount> IE 86, 8 octets, unsigned

Total amount of packets processed by B<yaf> from B<yaf> start time.

=item B<droppedPacketTotalCount> IE 135, 8 octets, unsigned

Total amount of dropped packets according to statistics given
by libpcap, libdag, or the Napatech or Netronome APIs.

=item B<ignoredPacketTotalCount> IE 164, 8 octets, unsigned

Total amount of packets ignored by the B<yaf> packet decoder, such as
unsupported packet types and incomplete headers, from B<yaf>
start time.

=item B<notSentPacketTotalCount> IE 167, 8 octets, unsigned

Total amount of packets rejected by B<yaf> because they were received
out of sequence.

=item B<yafExpiredFragmentCount> CERT (PEN 6871) IE 100, 4 octets, unsigned

Total amount of fragments that have been expired since B<yaf>
start time.

=item B<yafAssembledFragmentCount> CERT (PEN 6871) IE 101, 4 octets, unsigned

Total number of packets that been assembled from a series of
fragments since B<yaf> start time.

=item B<yafFlowTableFlushEventCount> CERT (PEN 6871) IE 104, 4 octets, unsigned

Total number of times the B<yaf> flow table has been flushed
since B<yaf> start time.

=item B<yafFlowTablePeakCount> CERT (PEN 6871) IE 105, 4 octets, unsigned

The maximum number of flows in the B<yaf> flow table at any
one time since B<yaf> start time.

=item B<exporterIPv4Address> IE 130, 4 octets, unsigned

The IPv4 Address of the B<yaf> flow sensor.

=item B<exportingProcessId> IE 144, 4 octets, unsigned

Set the ID of the B<yaf> flow sensor by giving a value to
B<--observation-domain>.  The default is 0.

=item B<yafMeanFlowRate> CERT (PEN 6871) IE 102, 4 octets, unsigned

The mean flow rate of the B<yaf> flow sensor since B<yaf> start time,
rounded to the nearest integer.

=item B<yafMeanPacketRate> CERT (PEN 6871) IE 103, 4 octets, unsigned

The mean packet rate of the B<yaf> flow sensor since B<yaf> start time,
rounded to the nearest integer.

=back

=head2 Tombstone Options Template

B<yaf> will export tombstone records periodically  using IPFIX Options Template
Records.  These records are intended to allow the  analysis of the time it takes
for records to be processed by each tool (eg.  YAF, Super Mediator, SiLK) in
your environment.  Each tombstone record generated by  B<yaf> consists of six
information elements: the observation domain ID set by the B<--observation-
domain> argument, the exporting process ID which is the PID of the YAF process,
a user- settable tombstone ID, a sequentially increasing  "tombstoneID" for each
record, the timestamp of the record's creation, and a subTemplateList of the
time each program interacted with the tombstone record. With ideal randomness
and/or proper user arguments, the 4 IDs taken together should uniquely specify a
record. Tombstone records are only active when stats are active and can be
individually turned off using the B<--no-tombstone> option.

The following Information Elements will be exported:

=over 4

=item B<observationDomainId> IE 149, 4 octets, unsigned

The (user-set) observation domain of the YAF sensor.

=item B<exportingProcessId> IE 144, 2 octets, unsigned

The PID of the YAF sensor.

=item B<certToolExporterConfiguredId> CERT (PEN 6871) IE 551, 2 octets, unsigned

An identification number for the record that is user specifiable at runtime
and shared across all records in a run of the given program.

=item B<certToolTombstoneId> CERT (PEN 6871) IE 550, 4 octets, unsigned

A sequentially increasing identification number unique to each tombstone
record in a run of a given program.

=item B<observationTimeSeconds> IE 322, 4 octets, dateTimeSeconds

The UNIX timestamp of when the record was created.

=item B<certToolTombstoneAccessList> CERT (PEN 6871) IE 554, variable length,
subTemplateList

A subTemplateList consisting of Tombstone Access Templates (see below) that
specify when each program that supports tombstone times-tamping interacted with
the tombstone record.

=back

=head2 Tombstone Access Template

The following two Information Elements will be exported as a template within the
subTemplateList of a Tombstone Options Template:

=over 4

=item B<certToolId> CERT (PEN 6871) IE 553, 4 octets, unsigned

The identification number of the program that interacted with the record.
B<yaf> has and ID of 1.

=item B<observationTimeSeconds> IE 322, 4 octets, dateTimeSeconds

The UNIX timestamp of when the program interacted with the record.

=back

=head1 SIGNALS

B<yaf> responds to B<SIGINT> or B<SIGTERM> by terminating input processing,
flushing any pending flows to the current output, and exiting. If B<--verbose>
is given, B<yaf> responds to B<SIGUSR1> by printing present flow and fragment table
statistics to its log.  All other signals are handled by the C runtimes in
the default manner on the platform on which B<yaf> is currently operating.

=head1 EXAMPLES

To generate flows from an pcap file into an IPFIX file:

C<yaf --in packets.pcap --out flows.yaf>

To capture flows from a pcap interface and export them to files in the
current directory rotated hourly:

C<yaf --live pcap --in en1 --out en1_capture --rotate 3600>

To capture flows from an Endace DAG card and export them via IPFIX over TCP:

C<yaf --live dag --in dag0 --ipfix tcp --out my-collector.example.com>

To capture flows from a Napatech Adapter card using stream ID 20 and export them via IPFIX over UDP:

C<yaf --live napatech --in nt3g20 --ipfix udp --out localhost --ipfix-port 18000>

To capture flows from a Netronome NFE card and export to a file:

C<yaf --live netronome --in 0:0 --out /data/yaf/myipfix.yaf>

To convert a pcap formatted packet capture into IPFIX:

C<yaf E<lt>packets.pcap E<gt>flows.yaf>

To run B<yaf> with application labeling enabled and export via IPFIX over TCP:

C<yaf --live pcap --in eth1 --out 127.0.0.1 --ipfix tcp --ipfix-port=18001 --applabel --dpi-rules-files=/usr/local/etc/yafDPIRules.conf --max-payload=300>

To run B<yaf> with BPF on UDP Port 53

C<yaf --live pcap --in en1 --out /path/to/dst/ --rotate 120 --filter="udp port 53">

To run B<yaf> with Deep Packet Inspection enabled for HTTP, IMAP, and DNS:

C<yaf --in packets.pcap --out flows.yaf --applabel --max-payload=400 --dpi --dpi-select="80 143 53">

To run B<yaf> with DHCP Fingerprinting:

C<yaf --in packets.pcap --out flows.yaf --applabel --max-payload=1000 --plugin-name=/usr/local/lib/dhcp_fp_plugin.la>

To run B<yaf> with pcap generation:

C<yaf --in eth0 --live pcap --out localhost --ipfix tcp --ipfix-port=18001 --pcap /data/pcap --pcap-meta-file=/data/pcap_info>

To generate a pcap file for one particular flow in a pcap:

C<yaf --in packets.pcap --no-output --max-payload=2000 --pcap /data/oneflow.pcap --hash 2181525080 --stime 1407607897547>

=head1 KNOWN ISSUES

YAF BPF Filtering is ignored when using B<--live> I<dag>, I<napatech>, or
I<netronome> because libpcap is not used.

YAF PCAP Export options are ignored when using B<--live> I<dag>, I<napatech>,
or I<netronome>.

YAF requires libfixbuf 3.0.0 or later.

YAF 2.0 must be used with an IPFIX Collecting Process that can handle IPFIX lists elements, especially the subTemplateMultiList Information Element in order to retrieve certain flow information.  Older versions of YAF can read YAF 2.0 flow files, but will ignore anything contained in the subTemplateMultiList.

The plugin infrastructure has been modified in YAF 2.0 to export templates
in YAF's subTemplateMultiList element.

YAF 2.0 will export statistics in an Options Template and Options Data Records
unless the B<--no-stats> switch is given.  The IPFIX Collecting Process should be
able to differentiate between options records and flow records in order to
prevent incorrect transcoding of statistics records into flow records.

YAF will not rotate output files if it is not seeing any flow data.  However,
it will continue to write process statistics messages at the configured
interval time to the most recent output file.

When using PF_RING ZC with B<yaf>, a load balancing program is required.
See B<yafzcbalance(1)> for more information.

When running B<yaf> with B<--live>=pfring or B<--live>=zc, the call to receive
packets is blocking so B<yaf> will not export statistics messages or
respond to SIGUSR1 signals unless it is receiving data.

Presently, the B<destinationTransportPort> information element contains
ICMP type and code information for ICMP or ICMP6 flows; this is nonstandard
and may not be interoperable with other IPFIX implementations.

Bug reports and feature requests may be sent via email to
E<lt>netsa-help@cert.orgE<gt>.

=head1 AUTHORS

Brian Trammell, Chris Inacio,
Michael Duggan, Emily Sarneso, Dan Ruef, Matt Coates, Dillon Lareau
and the CERT Network Situational Awareness Group Engineering Team,
L<http://www.cert.org/netsa>.

=head1 SEE ALSO

B<yafscii(1)>, B<applabel(1)>, B<yafdpi(1)>, B<yafdhcp(1)>, B<yaf.init(1)>,
B<super_mediator(1)>, B<pipeline(1)>, B<ipfixDump(1)>, B<ipfix2json(1)>,
B<rwflowpack(8)>, B<flowcap(8)>, B<rwipfix2silk(1)>, B<tcpdump(1)>,
B<pcap(3)>, B<yafzcbalance(1)>, libp0f at
L<https://tools.netsa.cert.org/p0f/libp0f.html>, and the following IETF
Internet RFCs: Specification of the IPFIX Protocol for the Exchange of IP
Traffic Flow Information
L<RFC 7011|https://datatracker.ietf.org/doc/html/rfc7011>,
Information Model for IP Flow Information Export
L<RFC 5102|https://datatracker.ietf.org/doc/html/rfc7012>,
Bidirectional Flow Export using IPFIX
L<RFC 5103|https://datatracker.ietf.org/doc/html/rfc5103>,
Export of Structured Data in IPFIX
L<RFC 6313|https://datatracker.ietf.org/doc/html/rfc6313>

=cut
