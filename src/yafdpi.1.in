'\" t
.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "yafdpi" "1" "" "YAF Deep Packet Inspection" "YAF ??PACKAGE_VERSION??"
.hy
.SH NAME
.PP
yafdpi - YAF Deep Packet Inspection
.SH SYNOPSIS
.IP
.nf
\f[C]
yaf ... --dpi --max-payload=PAYLOAD [--dpi-rules-file=FILE]
        [--dpi-select=APPLABEL[,APPLABEL...]]
\f[R]
.fi
.SH DESCRIPTION
.PP
With Deep Packet Inspection (DPI) enabled, \f[B]yaf\f[R] can examine packet
payloads, capture useful information for a specific protocol, and export it in a
protocol-specific IPFIX template.
DPI in \f[B]yaf\f[R] is directly related to application labeling as it will only
perform DPI if a match was found during the application labeling phase, and it
will only execute an inspection specific to the protocol denoted by the
application label (applabel).
.RS
.PP
\f[B]Note:\f[R] The DPI support in YAF 3 differs greatly from that in prior
releases.
If using a previous release of \f[B]yaf\f[R], please consult the manual pages
for your installation.
.RE
.SS Required build time options: --enable-applabel --enable-dpi
.PP
Deep packet inspection support is not included in \f[B]yaf\f[R] by default; the
\f[B]--enable-applabel\f[R] and \f[B]--enable-dpi\f[R] options must be passed to
\f[V]configure\f[R].
.PP
To check whether your \f[B]yaf\f[R] installation has DPI enabled, run
\f[B]yaf\f[R] \f[B]--version\f[R] and check the setting of \[dq]Deep Packet
Inspection Support\[dq].
.SS Minimum required run time options: --dpi --max-payload
.PP
Deep packet inspection always requires payload capture to be enabled with the
\f[B]--max-payload\f[R] option.
Since DPI requires application labeling, the \f[B]--dpi\f[R] option will enable
both features.
.PP
A minimum payload capture length of 2048 bytes is recommended, but 4096 bytes is
ideal for best results (including capture of full certificate chains):
.IP
.nf
\f[C]
yaf --daemonize --live pcap --in eth0               \[rs]
    --out localhost --ipfix-port=18000 --ipfix tcp  \[rs]
    --dpi --max-payload=4096
\f[R]
.fi
.PP
DPI is enabled for all supported protocols by default, but you can also specify
the \f[B]dpi-select\f[R] option to select on which protocols to perform DPI.
The below command will perform DPI for only SMTP, DNS, and HTTP labeled flows:
.IP
.nf
\f[C]
yaf --daemonize --live pcap --in eth0               \[rs]
    --out localhost --ipfix-port=18000 --ipfix tcp  \[rs]
    --dpi --dpi-select=25,53,80 --max-payload=4096
\f[R]
.fi
.PP
DPI rules, or where to find them, are taken from a configuration file read by
\f[B]yaf\f[R] at startup time.
This is the same configuration file that \f[B]yaf\f[R] application labeling uses
and is written in Lua (https://www.lua.org/).
The rule file can be given on the command line with the
\f[B]--dpi-rules-file\f[R] option, or \f[B]yaf\f[R] will try to read it from the
default location of \f[V]/usr/local/etc/yafDPIRules.conf.\f[R] (The location may
be different depending on how your \f[B]yaf\f[R] installation was built.)
.IP
.nf
\f[C]
yaf --daemonize --live pcap --in eth0               \[rs]
    --out localhost --ipfix-port=18000 --ipfix tcp  \[rs]
    --dpi --dpi-rules-file=*FILE* --max-payload=4096
\f[R]
.fi
.SS Additional DNS Build Time Options
.PP
The default behavior of the \f[B]yaf\f[R]\[aq]s DNS DPI support is to capture
and export all DNS responses.
One or both of the following options may be given to \f[V]configure\f[R] to
limit which DNS responses \f[B]yaf\f[R] is capable of exporting.
.PP
\f[B]Once built, yaf only supports these DNS responses.
It will be necesssary to recompile and reinstall yaf to change its
behavior.\f[R]
.PP
When these build-time options are used, \f[B]yaf\f[R] still requires the
\f[B]--dpi\f[R] and \f[B]--max-payload\f[R] options to export the DNS elements.
.IP \[bu] 2
\f[B]--enable-exportDNSAuth\f[R] enables export of DNS Authoritative Responses
\f[I]only\f[R].
May be paired with the following option.
.IP \[bu] 2
\f[B]--enable-exportDNSNXDomain\f[R] enables export of DNS NXDomain Responses
\f[I]only\f[R].
May be paired with the previous option.
.SS Configuration File
.PP
While both applabel and DPI-related configuration options are in the
configuration file, here we are focusing only on options relevant to DPI.
The syntax for application labeling is described here.
.PP
The configuration file is written in Lua (https://www.lua.org/).
For specifics of the Lua language, see
http://www.lua.org/manual/5.3/manual.html.
.PP
Comments in Lua start with double hyphens (\f[V]--\f[R]) and continue to the end
of the line.
.SS DPI-Related Settings
.PP
The file has some DPI-specific variables that may be set:
.IP \[bu] 2
\f[B]per_field_limit\f[R] sets the number of bytes \f[B]yaf\f[R] will export for
any given DPI field.
This does not affect DNS DPI or SSL/TLS Certificate Capture.
For DNS, a domain name can have a maximum of 255 characters, so the limit is not
configurable.
Maximum value is 65535 with anything larger reverting this setting back to its
default value.
Default is 200 bytes.
.IP \[bu] 2
\f[B]per_record_limit\f[R] sets the total number of bytes \f[B]yaf\f[R] may
export from DPI.
No matter what this is set to, this number will not be larger than the
--max-payload value \f[B]yaf\f[R] is given at run time.
Maximum value is 65535 with anything larger reverting this setting back to its
default value.
Default is 1000 bytes.
.PP
Currently the per_field_limit and per_record_limit are global settings and apply
to all protocols.
In a future release, we may allow configuration of these limits per protocol.
.IP \[bu] 2
\f[B]cert_export_enabled\f[R], when set to \f[V]true\f[R], tells \f[B]yaf\f[R]
to export the full X.509 certificate to \f[B]sslCertificate\f[R] and disable the
normal X.509 certificate decode and export.
This is a useful option to offload certificate processing to a downstream tool,
such as Super Mediator, which can perform the extraction of relevant fields as
is typically done by \f[B]yaf\f[R], plus it provides the option to perform SHA-1
or MD5 hashing of the certificate.
Default is false.
.IP \[bu] 2
\f[B]cert_hash_enabled\f[R], when set to \f[V]true\f[R], has \f[B]yaf\f[R]
export the hash of the X.509 certificate as found in the certificate to
\f[B]sslCertificateHash\f[R].
This is typically the SHA-256 hash of the binary certificate but it can vary on
the hashing algorithm used.
The hashing algorithm can be identified by the \f[B]sslCertSignature\f[R] field.
If both \f[B]cert_export_enabled\f[R] and \f[B]cert_hash_enabled\f[R] are set to
true, \f[B]yaf\f[R] will export both the full X.509 certificate and perform the
normal decode and export of the X.509 certificate.
It is not recommended to do both.
Default is false.
.IP \[bu] 2
\f[B]dnssec_enabled\f[R] has \f[B]yaf\f[R] perform and export DPI on DNSSEC
Resource Records, if set to true.
Default is false.
.SS Rule Format
.PP
DPI related rule entries are ultimately optional and are only given after
required applabel keys within an applabel rule if \f[B]yaf\f[R] supports DPI for
the associated protocol.
.PP
The file must define a variable named \f[V]applabels\f[R] which is an array of
applabel tables.
Each applabel table defines a rule that tells \f[B]yaf\f[R] how to assign an
applabel, what information elements to create when doing DPI, and how to assign
values to those elements.
.PP
An applabel rule has the form
.IP
.nf
\f[C]
 {label=<APP>,
  label_type=\[dq]<LABEL_TYPE>\[dq],
  value=[=[<EXPRESSION>]=],
  ports={<PORTS>},
  protocol=<PROTO>,
  active=<true|false>,
  <DPI-RELATED-ENTRIES>}
\f[R]
.fi
.PP
Here, we expand on the available options which may be given for
\f[B]<DPI-RELATED-ENTRIES>\f[R].
(See application labeling for a desciption of the other key-value pairs.)
.PP
If \f[B]yaf\f[R] supports DPI for a given protocol, the associated applabel rule
will include at least the following:
.IP
.nf
\f[C]
dpi_type=\[dq]<DPI_TYPE>\[dq]
\f[R]
.fi
.PP
where <DPI_TYPE> is how to perform DPI.
The value is a string, and the recognized values are: \f[B]none\f[R],
\f[B]regex\f[R], \f[B]plugin, and \f[R]regex-plugin**.
If \f[V]dpi_type\f[R] is not present or has the value \[dq]none\[dq], no DPI is
performed.
More details are in the \[dq]Assigning...\[dq] sections below.
.SS Assigning DPI Using Regular Expressions
.PP
A \[dq]regex\[dq] dpi_type is typically used with label_type=\[dq]regex\[dq]
rules and has the following form:
.IP
.nf
\f[C]
 {label=<APP>,
  label_type=\[dq]regex\[dq],
  active=true,
  protocol=<PROTO>,
  value=[=[<APP_PCRE_REGEX>]=],
  dpi_type=\[dq]regex\[dq],
  dpi_template_id=<TID>,
  dpi_name=\[dq]<NAME>\[dq],
  dpi_rules={
      {elem_name=\[dq]<ELEMENT>\[dq],
       active=<true|false>,
       regex=[=[DPI_PCRE_REGEX]=]},
      ...
  }}
\f[R]
.fi
.PP
where the following additional key-value pairs are required or strongly
recommended:
.IP \[bu] 2
\f[B]dpi_template_id\f[R] is the template ID to assign to the template holding
this information.
The ID must be a value between 256 and 65535 and it must not match any other
template ID used by yaf.
If this element is not present or 0, an arbitrary ID is assigned.
This template will hold one or more information elements of type basicList.
.IP \[bu] 2
\f[B]dpi_name\f[R] is a name to assign to the template; this name is exported as
part of the template metadata.
If not present, a name is generated.
.IP \[bu] 2
\f[B]dpi_rules\f[R] is an array of tables, where each table describes one
information element to appear in the template and a regular expression to
extract the data for that element from the payload.
The tables in dpi_rules must have the following entries:
.RS 2
.IP \[bu] 2
\f[B]elem_name\f[R] is the name of the information element to use for each value
found by the regex.
This must name an existing element.
.IP \[bu] 2
\f[B]regex\f[R] is a PCRE (https://www.pcre.org/) regular expression that is
used to examine the payload.
Each time it matches, a new elem_name item is created.
All the elements are stored in a basicList that is itself added to the template
specified by dpi_template_id.
.RS 2
.PP
If capturing parantheses are used in the regex, only the text captured by the
first set of parantheses is exported.
If no capturing parantheses are used, the entire match is exported.
.RE
.IP \[bu] 2
\f[B]active\f[R] is an optional boolean value.
If present and \f[V]false\f[R] the entry is ignored.
.RE
.PP
When creating the template that holds the basicLists, YAF first checks for an
information element of whose name is elem_name+\[dq]List\[dq] and whose type is
basicList.
If found, that element is used, otherwise the generic basicList element is used.
.SS Assigning DPI Using A Plugin
.PP
Rules with label_type=\[dq]plugin\[dq] may have a dpi_type of either
\[dq]plugin\[dq] or \[dq]regex-plugin\[dq].
The latter is rarely used; see the DNP 3.0, Modbus, and Ethernet/IP rules for
examples.
.PP
Typically, a \[dq]plugin\[dq] dpi_type is used with label_type=\[dq]plugin\[dq]
rules and the same <LIBRARY> is used to perform DPI.
In this case, no additional key-value pairs are required and the rule has the
following form:
.IP
.nf
\f[C]
{label=<APP>,
 label_type=\[dq]plugin\[dq],
 active=true,
 value=[=[<LIBRARY>]=],
 args={[[ARG1]], [[ARG2]], ...},
 dpi_type=\[dq]plugin\[dq]}
\f[R]
.fi
.SS Creating New Information Elements
.PP
The variable \f[V]elements\f[R] may be used to define new information elements
within the CERT private enterprise domain (Private Enterprise Number (PEN)
6871).
If defined, it must be an array of tables, where each table represents an
element:
.IP
.nf
\f[C]
elements = {
  {name=\[dq]<NAME>\[dq], id=<NUM>, is_string=<true|false>},
  ...
}
\f[R]
.fi
.PP
Each table in \f[V]elements\f[R] must contain the keys \f[V]name\f[R] and
\f[V]id\f[R], where <NAME> is the name of the element and <NUM> is its ID.
<NAME> must be an unused name and <NUM> must be an unused ID between 1 and 16383
inclusive.
If you attempt to use an existing name or ID, \f[B]yaf\f[R] exists with an error
message.
To find an unused name and ID, consult the CERT IPFIX Registry for the defined
elements.
.PP
The key \f[V]is_string\f[R] accepts a boolean; if present and true, the type of
the new element is set to \f[V]string\f[R], otherwise the new element\[aq]s type
is \f[V]octetArray\f[R].
Typically \f[V]string\f[R] should be \f[V]true\f[R] unless the object contains
binary data.
.PP
Keep in mind that user defined information elements may be added for any
\[dq]regex\[dq] dpi_type, but there is a total limit of 40 regexes per protocol.
.PP
To find out if \f[B]yaf\f[R] accepted your elements, run \f[B]yaf\f[R] with
\f[B]--verbose\f[R] and review the terminal output or log file.
.PP
Upon \f[B]yaf\f[R] startup and capture, you will be able to see if the rule
files and their regular expressions were accepted.
.IP
.nf
\f[C]
[2021-10-15 17:20:14] DPI Running for ALL Protocols
[2021-10-15 17:20:14] Reading packets from packets.pcap
[2021-10-15 17:20:14] Initializing Rules from DPI File /usr/local/etc/yafDPIRules.conf
[2021-10-15 17:20:14] DPI rule scanner accepted 63 rules from the DPI Rule File
\f[R]
.fi
.PP
An unacceptable regular expression will be brought to your attention with the
above statements.
If you choose certain protocols for inspection using the \f[B]--dpi-select\f[R]
option, only the appropriate rule statements will be loaded into the DPI Rule
Scanner.
.SS DPI Data Export
.PP
\f[B]yaf\f[R]\[aq]s output consists of an IPFIX message stream.
\f[B]yaf\f[R] uses a variety of templates for IPFIX data records; As of
\f[B]yaf\f[R] 3.0, DPI information is now housed in its own named
subTemplateList: \f[B]yafDPIList\f[R].
Rather than the previous subTemplateMultiList which could have a variety of
nested templates for each record, the \f[B]yafDPIList\f[R] will only use one
template per record, corresponding to the DPI for the protocol specified in the
\f[B]silkAppLabel\f[R] field.
.PP
Below are the templates that may appear depending on the application label of
the flow.
For more information on \f[B]yaf\f[R] information elements see \f[I]\f[R]<todo
link to basic flow record>\f[I]\f[R].
For more information on IPFIX Structured lists, see Export of Structured Data in
IPFIX, RFC 6313 (https://datatracker.ietf.org/doc/html/rfc6313.html).
.PP
Most of the values are exported as a basicList, which represents a list of zero
or more instances of any Information Element.
In YAF 3, there is a specific element of type basicList that holds a single type
of element.
For example, the HTTP GET DPI is exported in the httpGetList element, which is a
basicList that holds zero or more httpGet elements.
.SS HTTP
.PP
Hypertext Transfer Protocol (HTTP) Deep Packet Inspection is based on RFC
2616 (https://datatracker.ietf.org/doc/html/rfc2616.html).
.IP \[bu] 2
\f[B]httpServerStringList\f[R] CERT (PEN 6871) IE 338, variable length,
basicList of \f[B]httpServerString\f[R] CERT (PEN 6871) IE 110, variable length,
string
.RS 2
.PP
HTTP Server Response-header field.
Contains information about the software used to handle the HTTP Request.
.RE
.IP \[bu] 2
\f[B]httpUserAgentList\f[R] CERT (PEN 6871) IE 339, variable length, basicList
of \f[B]httpUserAgent\f[R] CERT (PEN 6871) IE 111, variable length, string
.RS 2
.PP
HTTP User-Agent Request-header field.
Contains information about the user agent originating the request.
.RE
.IP \[bu] 2
\f[B]httpGetList\f[R] CERT (PEN 6871) IE 340, variable length, basicList of
\f[B]httpGet\f[R] CERT (PEN 6871) IE 112, variable length, string
.RS 2
.PP
HTTP Method Command.
Retrieves information identified by the following Request-URI.
.RE
.IP \[bu] 2
\f[B]httpConnectionList\f[R] CERT (PEN 6871) IE 341, variable length, basicList
of \f[B]httpConnection\f[R] CERT (PEN 6871) IE 113, variable length, string
.RS 2
.PP
HTTP Connection header fields.
Contains options that are desired for a particular connection.
.RE
.IP \[bu] 2
\f[B]httpRefererList\f[R] CERT (PEN 6871) IE 343, variable length, basicList of
\f[B]httpReferer\f[R] CERT (PEN 6871) IE 115, variable length, string
.RS 2
.PP
HTTP Referer request-header field.
Address (URI) of the resource which the Request-URI was obtained.
.RE
.IP \[bu] 2
\f[B]httpLocationList\f[R] CERT (PEN 6871) IE 344, variable length, basicList of
\f[B]httpLocation\f[R] CERT (PEN 6871) IE 116, variable length, string
.RS 2
.PP
HTTP Location response-header field.
Used to redirect the recipient to a location to complete a request or identify a
new resource.
.RE
.IP \[bu] 2
\f[B]httpHostList\f[R] CERT (PEN 6871) IE 345, variable length, basicList of
\f[B]httpHost\f[R] CERT (PEN 6871) IE 117, variable length, string
.RS 2
.PP
HTTP Host Request-header.
The Internet host and port number of the resource being requested.
.RE
.IP \[bu] 2
\f[B]httpContentLengthList\f[R] CERT (PEN 6871) IE 346, variable length,
basicList of \f[B]httpContentLength\f[R] CERT (PEN 6871) IE 118, variable
length, string
.RS 2
.PP
HTTP Content-Length header.
Indicates the size of the entity-body.
.RE
.IP \[bu] 2
\f[B]httpAgeList\f[R] CERT (PEN 6871) IE 347, variable length, basicList of
\f[B]httpAge\f[R] CERT (PEN 6871) IE 119, variable length, string
.RS 2
.PP
HTTP Age response-header.
Argument is the sender\[aq]s estimate of the time elapsed since the response.
.RE
.IP \[bu] 2
\f[B]httpResponseList\f[R] CERT (PEN 6871) IE 351, variable length, basicList of
\f[B]httpResponse\f[R] CERT (PEN 6871) IE 123, variable length, string
.RS 2
.PP
HTTP Response Status Code.
Usually a three-digit number followed by text.
.RE
.IP \[bu] 2
\f[B]httpAcceptLanguageList\f[R] CERT (PEN 6871) IE 349, variable length,
basicList of \f[B]httpAcceptLanguage\f[R] CERT (PEN 6871) IE 121, variable
length, string
.RS 2
.PP
HTTP Accept-Language Request-Header field.
Restricts the set of natural languages that preferred.
.RE
.IP \[bu] 2
\f[B]httpAcceptList\f[R] CERT (PEN 6871) IE 348, variable length, basicList of
\f[B]httpAccept\f[R] CERT (PEN 6871) IE 120, variable length, string
.RS 2
.PP
HTTP Accept request-header field.
Used to specify certain media types that are acceptable for the response.
.RE
.IP \[bu] 2
\f[B]httpContentTypeList\f[R] CERT (PEN 6871) IE 350, variable length, basicList
of \f[B]httpContentType\f[R] CERT (PEN 6871) IE 122, variable length, string
.RS 2
.PP
HTTP Content Type entity-header field.
Indicates the media type of the entity-body.
.RE
.IP \[bu] 2
\f[B]httpVersionList\f[R] CERT (PEN 6871) IE 342, variable length, basicList of
\f[B]httpVersion\f[R] CERT (PEN 6871) IE 114, variable length, string
.RS 2
.PP
HTTP Version Number.
.RE
.IP \[bu] 2
\f[B]httpCookieList\f[R] CERT (PEN 6871) IE 390, variable length, basicList of
\f[B]httpCookie\f[R] CERT (PEN 6871) IE 220, variable length, string
.RS 2
.PP
HTTP Cookie Header Field.
.RE
.IP \[bu] 2
\f[B]httpSetCookieList\f[R] CERT (PEN 6871) IE 391, variable length, basicList
of \f[B]httpSetCookie\f[R] CERT (PEN 6871) IE 221, variable length, string
.RS 2
.PP
HTTP Set Cookie Header Field.
.RE
.IP \[bu] 2
\f[B]httpAuthorizationList\f[R] CERT (PEN 6871) IE 392, variable length,
basicList of \f[B]httpAuthorization\f[R] CERT (PEN 6871) IE 252, variable
length, string
.RS 2
.PP
HTTP Authorization Header Field.
.RE
.IP \[bu] 2
\f[B]httpViaList\f[R] CERT (PEN 6871) IE 393, variable length, basicList of
\f[B]httpVia\f[R] CERT (PEN 6871) IE 253, variable length, string
.RS 2
.PP
HTTP Via Header Field.
.RE
.IP \[bu] 2
\f[B]httpXForwardedForList\f[R] CERT (PEN 6871) IE 394, variable length,
basicList of \f[B]httpXForwardedFor\f[R] CERT (PEN 6871) IE 254, variable
length, string
.RS 2
.PP
HTTP X-Forwarded-For Header Field.
.RE
.IP \[bu] 2
\f[B]httpRefreshList\f[R] CERT (PEN 6871) IE 396, variable length, basicList of
\f[B]httpRefresh\f[R] CERT (PEN 6871) IE 256, variable length, string
.RS 2
.PP
HTTP Refresh Header Field.
.RE
.SS Optional HTTP Elements
.PP
The following information elements are defined but not enabled by default.
To enable any of the following fields individually, set the field\[aq]s
\f[V]active\f[R] key to \f[V]true\f[R] in the yafDPIRules.conf file.
.SS HTTP Mobile Fields
.PP
These fields may be enabled all together by setting the \f[B]http_mobile\f[R]
variable to \f[V]true\f[R] in the yafDPIRules.conf file.
.IP \[bu] 2
\f[B]httpIMEIList\f[R] CERT (PEN 6871) IE 397, variable length, basicList of
\f[B]httpIMEI\f[R] CERT (PEN 6871) IE 257, variable length, string
.RS 2
.PP
HTTP International Mobile Station Equipment Identity ID.
.RE
.IP \[bu] 2
\f[B]httpIMSIList\f[R] CERT (PEN 6871) IE 398, variable length, basicList of
\f[B]httpIMSI\f[R] CERT (PEN 6871) IE 258, variable length, string
.RS 2
.PP
HTTP International Mobile Subscriber Identity
.RE
.IP \[bu] 2
\f[B]httpMSISDNList\f[R] CERT (PEN 6871) IE 399, variable length, basicList of
\f[B]httpMSISDN\f[R] CERT (PEN 6871) IE 259, variable length, string
.RS 2
.PP
HTTP MSISDN number, a telephone number for the SIM card in a mobile/cellular
phone.
.RE
.IP \[bu] 2
\f[B]httpSubscriberList\f[R] CERT (PEN 6871) IE 400, variable length, basicList
of \f[B]httpSubscriber\f[R] CERT (PEN 6871) IE 260, variable length, string
.RS 2
.PP
HTTP Mobile Subscriber Information
.RE
.SS HTTP Extra Fields
.PP
These fields may be enabled all together by setting the \f[B]http_extra\f[R]
variable to \f[V]true\f[R] in the yafDPIRules.conf file.
.IP \[bu] 2
\f[B]httpExpiresList\f[R] CERT (PEN 6871) IE 395, variable length, basicList of
\f[B]httpExpires\f[R] CERT (PEN 6871) IE 255, variable length, string
.RS 2
.PP
HTTP Expires Header Field.
.RE
.IP \[bu] 2
\f[B]httpAcceptCharsetList\f[R] CERT (PEN 6871) IE 401, variable length,
basicList of \f[B]httpAcceptCharset\f[R] CERT (PEN 6871) IE 261, variable
length, string
.RS 2
.PP
HTTP Accept Charset Header Field.
.RE
.IP \[bu] 2
\f[B]httpAllowList\f[R] CERT (PEN 6871) IE 402, variable length, basicList of
\f[B]httpAllow\f[R] CERT (PEN 6871) IE 263, variable length, string
.RS 2
.PP
HTTP Accept Encoding Header Field.
.RE
.IP \[bu] 2
\f[B]httpDateList\f[R] CERT (PEN 6871) IE 403, variable length, basicList of
\f[B]httpDate\f[R] CERT (PEN 6871) IE 264, variable length, string
.RS 2
.PP
HTTP Date Header Field.
.RE
.IP \[bu] 2
\f[B]httpExpectList\f[R] CERT (PEN 6871) IE 404, variable length, basicList of
\f[B]httpExpect\f[R] CERT (PEN 6871) IE 265, variable length, string
.RS 2
.PP
HTTP Expect Header Field.
.RE
.IP \[bu] 2
\f[B]httpFromList\f[R] CERT (PEN 6871) IE 405, variable length, basicList of
\f[B]httpFrom\f[R] CERT (PEN 6871) IE 266, variable length, string
.RS 2
.PP
HTTP From Header Field.
.RE
.IP \[bu] 2
\f[B]httpProxyAuthenticationList\f[R] CERT (PEN 6871) IE 406, variable length,
basicList of \f[B]httpProxyAuthentication\f[R] CERT (PEN 6871) IE 267, variable
length, string
.RS 2
.PP
HTTP Proxy Authentication Field.
.RE
.IP \[bu] 2
\f[B]httpUpgradeList\f[R] CERT (PEN 6871) IE 407, variable length, basicList of
\f[B]httpUpgrade\f[R] CERT (PEN 6871) IE 268, variable length, string
.RS 2
.PP
HTTP Upgrade Header Field.
.RE
.IP \[bu] 2
\f[B]httpWarningList\f[R] CERT (PEN 6871) IE 408, variable length, basicList of
\f[B]httpWarning\f[R] CERT (PEN 6871) IE 269, variable length, string
.RS 2
.PP
HTTP Warning Header Field.
.RE
.IP \[bu] 2
\f[B]httpDNTList\f[R] CERT (PEN 6871) IE 409, variable length, basicList of
\f[B]httpDNT\f[R] CERT (PEN 6871) IE 270, variable length, string
.RS 2
.PP
HTTP DNT Header Field.
.RE
.IP \[bu] 2
\f[B]httpXForwardedProtoList\f[R] CERT (PEN 6871) IE 410, variable length,
basicList of \f[B]httpXForwardedProto\f[R] CERT (PEN 6871) IE 271, variable
length, string
.RS 2
.PP
HTTP X-Forwarded-Proto Header Field.
.RE
.IP \[bu] 2
\f[B]httpXForwardedHostList\f[R] CERT (PEN 6871) IE 411, variable length,
basicList of \f[B]httpXForwardedHost\f[R] CERT (PEN 6871) IE 272, variable
length, string
.RS 2
.PP
HTTP X-Forwarded-Host Header Field.
.RE
.IP \[bu] 2
\f[B]httpXForwardedServerList\f[R] CERT (PEN 6871) IE 412, variable length,
basicList of \f[B]httpXForwardedServer\f[R] CERT (PEN 6871) IE 273, variable
length, string
.RS 2
.PP
HTTP X-Forwarded-Server Header Field.
.RE
.IP \[bu] 2
\f[B]httpXDeviceIdList\f[R] CERT (PEN 6871) IE 413, variable length, basicList
of \f[B]httpXDeviceId\f[R] CERT (PEN 6871) IE 274, variable length, string
.RS 2
.PP
HTTP X-Device ID Header Field.
.RE
.IP \[bu] 2
\f[B]httpXProfileList\f[R] CERT (PEN 6871) IE 414, variable length, basicList of
\f[B]httpXProfile\f[R] CERT (PEN 6871) IE 275, variable length, string
.RS 2
.PP
HTTP X-Profile Header Field.
.RE
.IP \[bu] 2
\f[B]httpLastModifiedList\f[R] CERT (PEN 6871) IE 415, variable length,
basicList of \f[B]httpLastModified\f[R] CERT (PEN 6871) IE 276, variable length,
string
.RS 2
.PP
HTTP Last Modified Header Field.
.RE
.IP \[bu] 2
\f[B]httpContentEncodingList\f[R] CERT (PEN 6871) IE 416, variable length,
basicList of \f[B]httpContentEncoding\f[R] CERT (PEN 6871) IE 277, variable
length, string
.RS 2
.PP
HTTP Content Encoding Header Field.
.RE
.IP \[bu] 2
\f[B]httpContentLanguageList\f[R] CERT (PEN 6871) IE 417, variable length,
basicList of \f[B]httpContentLanguage\f[R] CERT (PEN 6871) IE 278, variable
length, string
.RS 2
.PP
HTTP Content Language Header Field.
.RE
.IP \[bu] 2
\f[B]httpContentLocationList\f[R] CERT (PEN 6871) IE 418, variable length,
basicList of \f[B]httpContentLocation\f[R] CERT (PEN 6871) IE 279, variable
length, string
.RS 2
.PP
HTTP Content Location Header Field.
.RE
.IP \[bu] 2
\f[B]httpXUaCompatibleList\f[R] CERT (PEN 6871) IE 419, variable length,
basicList of \f[B]httpXUaCompatible\f[R] CERT (PEN 6871) IE 280, variable
length, string
.RS 2
.PP
HTTP X-UA-Compatible Header Field.
.RE
.SS SSH
.PP
Secure Shell (SSH) Deep Packet Inspection is based on RFC
4253 (https://datatracker.ietf.org/doc/html/rfc4253.html).
.IP \[bu] 2
\f[B]sshVersion\f[R] CERT (PEN 6871) IE 171, variable length, string
.RS 2
.PP
SSH Version Number of client and/or server
.RE
.IP \[bu] 2
\f[B]sshServerVersion\f[R] CERT (PEN 6871) IE 472, variable length, string
.RS 2
.PP
The version string from an SSH server.
.RE
.IP \[bu] 2
\f[B]sshKeyExchangeAlgorithm\f[R] CERT (PEN 6871) IE 476, variable length,
string
.RS 2
.PP
The negotiated key exchange algorithm used for an SSH session.
.RE
.IP \[bu] 2
\f[B]sshHostKeyAlgorithm\f[R] CERT (PEN 6871) IE 477, variable length, string
.RS 2
.PP
The negotiated host key algorithm used for an SSH session.
.RE
.IP \[bu] 2
\f[B]sshServerHostKey\f[R] CERT (PEN 6871) IE 478, variable length, octetarray
.RS 2
.PP
The MD5 hash of the public key of the SSH server.
.RE
.IP \[bu] 2
\f[B]sshCipher\f[R] CERT (PEN 6871) IE 473, variable length, string
.RS 2
.PP
The negotiated symmetric encryption algorithm used for an SSH session.
.RE
.IP \[bu] 2
\f[B]sshMacAlgorithm\f[R] CERT (PEN 6871) IE 474, variable length, string
.RS 2
.PP
The negotiated MAC algorithm used for an SSH session.
.RE
.IP \[bu] 2
\f[B]sshCompressionMethod\f[R] CERT (PEN 6871) IE 475, variable length, string
.RS 2
.PP
The negotiated compression algorithm used for an SSH session.
.RE
.IP \[bu] 2
\f[B]sshHassh\f[R] CERT (PEN 6871) IE 468, variable length, octetarray
.RS 2
.PP
The client HASSH MD5 hash of the sshHasshAlgorithms (CERT/469) fingerprint for
an SSH client.
.RE
.IP \[bu] 2
\f[B]sshServerHassh\f[R] CERT (PEN 6871) IE 470, variable length, octetarray
.RS 2
.PP
The server HASSH MD5 hash (hasshServer) of the sshServerHasshAlgorithms
(CERT/471) fingerprint for an SSH server.
.RE
.IP \[bu] 2
\f[B]sshHasshAlgorithms\f[R] CERT (PEN 6871) IE 469, variable length, string
.RS 2
.PP
The SSH client hasshAlgorithms: the concatenated name-lists of the
client-to-server algorithms delimited by a semicolon.
Element sshHassh (CERT/468) holds the MD5 of this.
.RE
.IP \[bu] 2
\f[B]sshServerHasshAlgorithms\f[R] CERT (PEN 6871) IE 471, variable length,
string
.RS 2
.PP
The SSH server hasshServerAlgoritms: the concatenated name-lists of the
server-to-client algorithms delimited by a semicolon.
Element sshServerHassh (CERT/470) holds the MD5 of this.
.RE
.SS SMTP
.PP
Simple Mail Transfer Protocol (SMTP) Deep Packet Inspection is based on RFC
2821 (https://datatracker.ietf.org/doc/html/rfc2821.html).
.PP
As of YAF 2.12, the SMTP DPI data is represented as a hierarchy.
The outer layer captures the SMTP connection information.
For each message sent during the connection, a separate sub-record is created.
Within the subrecord, another subrecord exists that contains the header fields
found in the DATA section exported as key-value pairs.
.IP \[bu] 2
\f[B]smtpHello\f[R] CERT (PEN 6871) IE 162, variable length, string
.RS 2
.PP
SMTP Hello or Extend Hello command.
Captures the command and the domain name or IP of the SMTP client.
.RE
.IP \[bu] 2
\f[B]smtpResponseList\f[R] CERT (PEN 6871) IE 331, variable length, basicList of
\f[B]smtpResponse\f[R] CERT (PEN 6871) IE 169, variable length, string
.RS 2
.PP
SMTP Replies.
Each smtpResponse contains of a three digit number followed by text.
.RE
.IP \[bu] 2
\f[B]smtpMessageList\f[R] CERT (PEN 6871) IE 336, variable length,
subTemplateList
.RS 2
.PP
A subTemplateList containing zero (but usually at least one) or more records
where each record represents a single email message sent during the SMTP
conversation.
That template contains the following elements:
.IP \[bu] 2
\f[B]smtpSubject\f[R] CERT (PEN 6871) IE 166, variable length, string
.RS 2
.PP
The subject of the message.
.RE
.IP \[bu] 2
\f[B]smtpToList\f[R] CERT (PEN 6871) IE 332, variable length, basicList of
\f[B]smtpTo\f[R] CERT (PEN 6871) IE 164, variable length, string
.RS 2
.PP
The SMTP Recipient (RCPT) Command.
Each smtpTo captures the forward-path of the recipient of the mail data.
.RE
.IP \[bu] 2
\f[B]smtpFromList\f[R] CERT (PEN 6871) IE 333, variable length, basicList of
\f[B]smtpFrom\f[R] CERT (PEN 6871) IE 163, variable length, string
.RS 2
.PP
SMTP Mail Command.
Each stmpFrom contains the reverse-path of the sender mailbox.
A successful message has a single \f[V]MAIL FROM\f[R], but the sender may
provide multiple if \f[V]RCPT TO\f[R] is rejected and the sender RSETs or if
they are testing/probing the server.
.RE
.IP \[bu] 2
\f[B]smtpFilenameList\f[R] CERT (PEN 6871) IE 334, variable length, basicList of
\f[B]smtpFilename\f[R] CERT (PEN 6871) IE 167, variable length, string
.RS 2
.PP
SMTP Filename.
Each smtpFilename contains the name of a file attached to the mail message, if
any.
.RE
.IP \[bu] 2
\f[B]smtpURLList\f[R] CERT (PEN 6871) IE 335, variable length, basicList of
\f[B]smtpURL\f[R] CERT (PEN 6871) IE 329, variable length, string
.RS 2
.PP
SMTP URL.
Each smtpURL contains a URL captured in the SMTP message body, if any.
.RE
.IP \[bu] 2
\f[B]smtpHeaderList\f[R] CERT (PEN 6871) IE 337, variable length,
subTemplateList
.RS 2
.PP
A subTemplateList containing zero or more records describing the message
headers.
Each record represents a single header (SMTP field name and body) in the email
DATA.
That template contains the following elements:
.IP \[bu] 2
\f[B]smtpKey\f[R] CERT (PEN 6871) IE 327, variable length, string
.RS 2
.PP
SMTP Header key string.
The name of the header (for example, \[dq]To\[dq], \[dq]From\[dq]).
.RE
.IP \[bu] 2
\f[B]smtpValue\f[R] CERT (PEN 6871) IE 328, variable length, string
.RS 2
.PP
SMTP Header value string.
The value of that header.
.RE
.RE
.IP \[bu] 2
\f[B]smtpMessageSize\f[R] CERT (PEN 6871) IE 330, 4 octets, unsigned
.RS 2
.PP
SMTP Size Header Field, optionally given by the client following a MAIL FROM
command.
Contains the size in bytes of the mail data.
.RE
.RE
.IP \[bu] 2
\f[B]smtpStartTLS\f[R] CERT (PEN 6871) IE 326, 1 octet, unsigned
.RS 2
.PP
Indicates whether or not the SMTP session sent the STARTTLS command.
.RE
.SS DNS
.PP
Domain Name System (DNS) Deep Packet Inspection is based on RFC
1035 (https://datatracker.ietf.org/doc/html/rfc1035.html).
.PP
DNS information is exported in the \f[B]yafDPIList\f[R] as zero or more DNS
Resource Record Templates.
Each Resource Record (RR) entry contains generic RR information such as type,
TTL, and name.
There is also a subTemplateList element, \f[B]dnsDetailRecordList\f[R], that
contains RR specific information based on the type of RR (A Record vs NS Record,
for example).
The main subTemplateList contains one entry for each RR in the flow.
.PP
The following elements are contained in the DNS Resource Record Template.
.IP \[bu] 2
\f[B]dnsQueryResponse\f[R] CERT (PEN 6871) IE 174, 1 octet, unsigned
.RS 2
.PP
DNS Query/Response header field.
This corresponds with the DNS header one bit field, QR, indicating whether the
record is a query (0) or a response (1).
.RE
.IP \[bu] 2
\f[B]dnsRRType\f[R] CERT (PEN 6871) IE 175, 2 octets, unsigned
.RS 2
.PP
DNS Query/Response Type.
This corresponds with the QTYPE field in the DNS Question Section or the TYPE
field in the DNS Resource Record Section.
This field determines the template used by the \f[B]dnsDetailRecordList\f[R]
subTemplateList found in this record.
.RE
.IP \[bu] 2
\f[B]dnsAuthoritative\f[R] CERT (PEN 6871) IE 176, 1 octet, unsigned
.RS 2
.PP
DNS Authoritative header field.
This corresponds with the DNS header one bit field, AA.
This bit is only valid in responses (when \f[B]dnsQueryResponse\f[R] is 1), and
specifies that the responding name server is an authority for the domain name in
the question section.
.RE
.IP \[bu] 2
\f[B]dnsResponseCode\f[R] CERT (PEN 6871) IE 177, 1 octet, unsigned
.RS 2
.PP
This corresponds with the DNS RCODE header field.
This field is set to 0 for No Error, 1 for a Format Error, 2 for a Server
Failure, and 3 for a Name Error.
See <http://www.iana.org/assignments/dns-parameters> for other valid values.
.RE
.IP \[bu] 2
\f[B]dnsSection\f[R] CERT (PEN 6871) IE 178, 1 octet, unsigned
.RS 2
.PP
DNS Resource Record Section Field.
This field is set to 0 if the information is from the Question Section, 1 for
the Answer Section, 2 for the Name Server Section, and 3 for the Additional
Section.
.RE
.IP \[bu] 2
\f[B]dnsName\f[R] CERT (PEN 6871) IE 179, variable length, string
.RS 2
.PP
A DNS Query or Response Name.
This field corresponds with the QNAME field in the DNS Question Section or the
NAME field in the DNS Resource Record Section.
.RE
.IP \[bu] 2
\f[B]dnsTTL\f[R] CERT (PEN 6871) IE 199, 4 octets, unsigned
.RS 2
.PP
DNS Time To Live.
This is an unsigned integer that specifies the time interval, in seconds, that
the resource record may be cached for.
This contains a value of zero for DNS Queries.
.RE
.IP \[bu] 2
\f[B]dnsId\f[R] CERT (PEN 6871) IE 226, 2 octets, unsigned
.RS 2
.PP
DNS Transaction ID.
This identifier is used by the requester to match replies to outstanding
queries.
.RE
.IP \[bu] 2
\f[B]dnsDetailRecordList\f[R] CERT (PEN 6871) IE 431, variable length,
subTemplateList
.RS 2
.PP
An IPFIX subTemplateList.
This list contains a \[dq]DNS Resource Record Type\[dq] Template, whose type
depends on the type (\f[B]dnsRRType\f[R]) of resource record, as described in
the next subsection.
.RE
.SS DNS Resource Record Types
.PP
This section describes the templates that may be used in the
\f[B]dnsDetailRecordList\f[R] according to the type of resource record (the
\f[B]dnsRRType\f[R]).
.IP \[bu] 2
DNS A (Address) Resource Record
.RS 2
.PP
This entry exists if \f[B]dnsRRType\f[R] is 1 and the A Record contains an IP
address.
.IP \[bu] 2
\f[B]dnsA\f[R] CERT (PEN 6871) IE 302, 4 octets, ipv4Address
.RS 2
.PP
The IPv4 address of the host.
.RE
.RE
.IP \[bu] 2
DNS NS (Name Server) Resource Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is 2 and the NS Record contains an
NSDNAME.
.IP \[bu] 2
\f[B]dnsNSDName\f[R] CERT (PEN 6871) IE 183, variable length, string
.RS 2
.PP
An authoritative name server domain-name.
.RE
.RE
.IP \[bu] 2
DNS CNAME (Canonical Name) Resource Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is 5 and the CNAME Record contains
a CNAME.
.IP \[bu] 2
\f[B]dnsCNAME\f[R] CERT (PEN 6871) IE 180, variable length, string
.RS 2
.PP
A domain-name which specifies the canonical or primary name for the owner.
.RE
.RE
.IP \[bu] 2
DNS SOA (Start of Authority) Resource Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is 6 and the SOA Record contains at
least 1 of the following elements (all element are always present in the
template):
.IP \[bu] 2
\f[B]dnsSOAMName\f[R] CERT (PEN 6871) IE 214, variable length, string
.RS 2
.PP
Corresponds to DNS SOA MNAME Field.
.RE
.IP \[bu] 2
\f[B]dnsSOARName\f[R] CERT (PEN 6871) IE 215, variable length, string
.RS 2
.PP
Corresponds to DNS SOA RNAME Field.
.RE
.IP \[bu] 2
\f[B]dnsSOASerial\f[R] CERT (PEN 6871) IE 209, 4 octets, unsigned
.RS 2
.PP
Corresponds to DNS SOA SERIAL Field.
.RE
.IP \[bu] 2
\f[B]dnsSOARefresh\f[R] CERT (PEN 6871) IE 210, 4 octets, unsigned
.RS 2
.PP
Corresponds to DNS SOA REFRESH Field.
.RE
.IP \[bu] 2
\f[B]dnsSOARetry\f[R] CERT (PEN 6871) IE 211, 4 octets, unsigned
.RS 2
.PP
Corresponds to DNS SOA RETRY Field.
.RE
.IP \[bu] 2
\f[B]dnsSOAExpire\f[R] CERT (PEN 6871) IE 212, 4 octets, unsigned
.RS 2
.PP
Corresponds to DNS SOA EXPIRE Field.
.RE
.IP \[bu] 2
\f[B]dnsSOAMinimum\f[R] CERT (PEN 6871) IE 213, 4 octets, unsigned
.RS 2
.PP
Corresponds to DNS SOA MINIMUM Field.
.RE
.RE
.IP \[bu] 2
DNS PTR (Domain Name Pointer) Resource Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 12 and PTRDNAME exists.
.IP \[bu] 2
\f[B]dnsPTRDName\f[R] CERT (PEN 6871) IE 184, variable length, string
.RS 2
.PP
Corresponds to DNS PTR PTRDNAME Field.
.RE
.RE
.IP \[bu] 2
DNS MX (Mail Exchange) Resource Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 15 and MXExchange exists
.IP \[bu] 2
\f[B]dnsMXExchange\f[R] CERT (PEN 6871) IE 182, variable length, string
.RS 2
.PP
Corresponds to the DNS MX Exchange field.
.RE
.IP \[bu] 2
\f[B]dnsMXPreference\f[R] CERT (PEN 6871) IE 181, 2 octets, unsigned
.RS 2
.PP
Corresponds to the DNS MX Preference field.
.RE
.RE
.IP \[bu] 2
DNS TXT (Text) Resource Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 16 and TXT-DATA exists.
.IP \[bu] 2
\f[B]dnsTXTData\f[R] CERT (PEN 6871) IE 208, variable length, string
.RS 2
.PP
Corresponds to DNS TXT TXT-DATA field.
.RE
.RE
.IP \[bu] 2
DNS AAAA (IPv6 Address) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 28 and the IPv6 Address
exists.
See RFC 3596 (https://datatracker.ietf.org/doc/html/rfc3596.html).
.IP \[bu] 2
\f[B]dnsAAAA\f[R] CERT (PEN 6871) IE 303, 16 octets, ipv6Address
.RS 2
.PP
An IPv6 Address found in the data portion of an AAAA Resource Record.
.RE
.RE
.IP \[bu] 2
DNS SRV (Server Locator) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 33 and at least 1 of the
following elements exist (all element are always present in the template).
See RFC 2782 (https://datatracker.ietf.org/doc/html/rfc2782.html).
.IP \[bu] 2
\f[B]dnsSRVTarget\f[R] CERT (PEN 6871) IE 219, variable length, string
.RS 2
.PP
Corresponds to the Target Field in the DNS SRV Resource Record.
.RE
.IP \[bu] 2
\f[B]dnsSRVPriority\f[R] CERT (PEN 6871) IE 216, 2 octets, unsigned
.RS 2
.PP
Corresponds to the Priority Field in the DNS SRV Resource Record.
.RE
.IP \[bu] 2
\f[B]dnsSRVWeight\f[R] CERT (PEN 6871) IE 217, 2 octets, unsigned
.RS 2
.PP
Corresponds to the Weight Field in the DNS SRV Resource Record.
.RE
.IP \[bu] 2
\f[B]dnsSRVPort\f[R] CERT (PEN 6871) IE 218, 2 octets, unsigned
.RS 2
.PP
Corresponds to the Port Field in the DNS SRV Resource Record.
.RE
.RE
.SS DNSSEC Resource Record Types
.PP
DNSSEC information is not exported by default.
To export DNSSEC information, set \f[B]dnssec_enabled\f[R] to true in the
yafDPIRules.conf file.
DNSSEC DPI is based on RFC 4034, Resource Records for the DNS Security
Extensions (https://datatracker.ietf.org/doc/html/rfc4034.html) and, for NSEC3,
RFC 5155, DNS Security (DNSSEC) Hashed Authenticated Denial of
Existence (https://datatracker.ietf.org/doc/html/rfc5155.html).
.IP \[bu] 2
DNSSEC DNSKEY (DNS Key) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 48 and at least 1 of the
following elements exist (all element are always present in the template).
.IP \[bu] 2
\f[B]dnsDNSKEYPublicKey\f[R] CERT (PEN 6871) IE 232, variable length, octetArray
.RS 2
.PP
DNSSEC uses public key cryptography to sign and authenticate DNS resource record
sets.
This field holds the public key.
The format depends on the algorithm of the key.
.RE
.IP \[bu] 2
\f[B]dnsDNSKEYFlags\f[R] CERT (PEN 6871) IE 241, 2 octets, unsigned
.RS 2
.PP
The flags field in the DNSKey Resource Record.
Certain bits determine if the key is a zone key or should be used for a secure
entry point.
.RE
.IP \[bu] 2
\f[B]dnsDNSKEYProtocol\f[R] CERT (PEN 6871) IE 304, 1 octet, unsigned
.RS 2
.PP
The protocol field in the DNSKEY RR.
This should be 3 or treated as invalid.
.RE
.IP \[bu] 2
\f[B]dnsDNSKEYAlgorithm\f[R] CERT (PEN 6871) IE 423, 1 octet, unsigned
.RS 2
.PP
Identifies the public key\[aq]s cryptographic algorithm, which determines its
format.
.RE
.RE
.IP \[bu] 2
DNSSEC DS (Delegation Signer) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 43 and at least 1 of the
following elements exist (all element are always present in the template).
.IP \[bu] 2
\f[B]dnsDSDigest\f[R] CERT (PEN 6871) IE 231, variable length, octetArray
.RS 2
.PP
The digest of the DNSKEY RR.
.RE
.IP \[bu] 2
\f[B]dnsDSKeyTag\f[R] CERT (PEN 6871) IE 434, 2 octets, unsigned
.RS 2
.PP
The Key Tag field in the DS RR.
.RE
.IP \[bu] 2
\f[B]dnsDSAlgorithm\f[R] CERT (PEN 6871) IE 433, 1 octet, unsigned
.RS 2
.PP
The Algorithm number of the DNSKEY RR referred to by the DS Record.
.RE
.IP \[bu] 2
\f[B]dnsDSDigestType\f[R] CERT (PEN 6871) IE 238, 1 octet, unsigned
.RS 2
.PP
The Digest Type field which identifies the algorithm used to construct the
digest.
.RE
.RE
.IP \[bu] 2
DNSSEC RRSIG (DNSSEC Signature) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 46 and at least one of
the following fields exists (all element are always present in the template).
.IP \[bu] 2
\f[B]dnsRRSIGSigner\f[R] CERT (PEN 6871) IE 229, variable length, string
.RS 2
.PP
The Signer\[aq]s Name field in the RRSIG RR.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGSignature\f[R] CERT (PEN 6871) IE 230, variable length, octetArray
.RS 2
.PP
The Signature field in the RRSIG RR.
Contains the cryptographic signature that covers the dnsName field.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGSignatureInception\f[R] CERT (PEN 6871) IE 237, 4 octets, unsigned
.RS 2
.PP
The Signature Inception field in a RRSIG RR.
The Expiration and Inception fields specify a validity period for the signature.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGSignatureExpiration\f[R] CERT (PEN 6871) IE 236, 4 octets, unsigned
.RS 2
.PP
The Signature Expiration field in a RRSIG RR.
The Expiration and Inception fields specify a validity period for the signature.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGOriginalTTL\f[R] CERT (PEN 6871) IE 449, 4 octets, unsigned
.RS 2
.PP
The Original TTL Field in the RRSIG RR.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGKeyTag\f[R] CERT (PEN 6871) IE 448, 2 octets, unsigned
.RS 2
.PP
The Key Tag field in a RRSIG RR.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGTypeCovered\f[R] CERT (PEN 6871) IE 240, 2 octets, unsigned
.RS 2
.PP
The Type Covered field in a RRSIG RR.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGAlgorithm\f[R] CERT (PEN 6871) IE 447, 1 octet, unsigned
.RS 2
.PP
The Algorithm Number field in a RRSIG RR.
Identifies the algorithm used to create the signature.
.RE
.IP \[bu] 2
\f[B]dnsRRSIGLabels\f[R] CERT (PEN 6871) IE 239, 1 octet, unsigned
.RS 2
.PP
The Labels field in a RRSIG RR.
Specifies the number of labels in the original RRSIG resource record owner name.
.RE
.RE
.IP \[bu] 2
DNSSEC NSEC (Next Secure) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 47 and the
dnsNSECNextDomainName field exists.
.IP \[bu] 2
\f[B]dnsNSECNextDomainName\f[R] CERT (PEN 6871) IE 445, variable length,
octetArray
.RS 2
.PP
This item contains the Next Domain Name in the NSEC RR.
.RE
.IP \[bu] 2
\f[B]dnsNSECTypeBitMaps\f[R] CERT (PEN 6871) IE 446, variable length, octetArray
.RS 2
.PP
The Type Bit Maps field in a DNS NSEC RR.
.RE
.RE
.IP \[bu] 2
DNSSEC NSEC3 (Next Secure version 3) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 50 and at least one of
the following fields exists.
.IP \[bu] 2
\f[B]dnsNSEC3Salt\f[R] CERT (PEN 6871) IE 439, variable length, octetArray
.RS 2
.PP
The Salt Field in the DNSSEC NSEC3 RR.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3NextHashedOwnerName\f[R] CERT (PEN 6871) IE 438, variable length,
octetArray
.RS 2
.PP
The Next Hashed Owner Name in the DNSSEC NSEC3 RR.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3TypeBitMaps\f[R] CERT (PEN 6871) IE 440, variable length,
octetArray
.RS 2
.PP
The Type Bit Maps field in a DNS NSEC3 RR.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3Iterations\f[R] CERT (PEN 6871) IE 437, 2 octets, unsigned
.RS 2
.PP
The Iterations field in the DNSSEC NSEC3 RR.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3Algorithm\f[R] CERT (PEN 6871) IE 435, 1 octet, unsigned
.RS 2
.PP
The Hash Algorithm field in the DNSSEC NSEC3 RR.
Values are described in RFC 5155.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3Flags\f[R] CERT (PEN 6871) IE 436, 1 octet, unsigned
.RS 2
.PP
The Flags field in a DNS NSEC3 RR.
.RE
.RE
.IP \[bu] 2
DNSSEC NSEC3PARAM (NSEC3 Parameters) Record
.RS 2
.PP
This entry will exist if \f[B]dnsRRType\f[R] is set to 51 and at least one of
the following fields exists.
.IP \[bu] 2
\f[B]dnsNSEC3PARAMSalt\f[R] CERT (PEN 6871) IE 444, variable length, octetArray
.RS 2
.PP
The Salt Field in the DNSSEC NSEC3PARAM RR.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3PARAMIterations\f[R] CERT (PEN 6871) IE 443, 2 octets, unsigned
.RS 2
.PP
The Iterations field in the DNSSEC NSEC3PARAM RR.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3PARAMAlgorithm\f[R] CERT (PEN 6871) IE 441, 1 octet, unsigned
.RS 2
.PP
The Hash Algorithm field in the DNSSEC NSEC3PARAM RR.
Values are described in RFC 5155.
.RE
.IP \[bu] 2
\f[B]dnsNSEC3PARAMFlags\f[R] CERT (PEN 6871) IE 442, 1 octet, unsigned
.RS 2
.PP
The Flags field in a DNS NSEC3PARAM RR.
.RE
.RE
.SS FTP
.PP
File Transfer Protocol (FTP) Deep Packet Inspection is based on RFC
959 (https://datatracker.ietf.org/doc/html/rfc959.html).
.IP \[bu] 2
\f[B]ftpReturnList\f[R] CERT (PEN 6871) IE 355, variable length, basicList of
\f[B]ftpReturn\f[R] CERT (PEN 6871) IE 131, variable length, string
.RS 2
.PP
FTP Commands issued by the client.
.RE
.IP \[bu] 2
\f[B]ftpUserList\f[R] CERT (PEN 6871) IE 356, variable length, basicList of
\f[B]ftpUser\f[R] CERT (PEN 6871) IE 132, variable length, string
.RS 2
.PP
FTP User Command Argument.
This command will normally be the first command transmitted by the user.
.RE
.IP \[bu] 2
\f[B]ftpPassList\f[R] CERT (PEN 6871) IE 357, variable length, basicList of
\f[B]ftpPass\f[R] CERT (PEN 6871) IE 133, variable length, string
.RS 2
.PP
FTP Password Command Argument.
This command must be preceded by the user name command, and is usually required
to complete authentication.
.RE
.IP \[bu] 2
\f[B]ftpTypeList\f[R] CERT (PEN 6871) IE 358, variable length, basicList of
\f[B]ftpType\f[R] CERT (PEN 6871) IE 134, variable length, string
.RS 2
.PP
FTP Data Representation Type.
.RE
.IP \[bu] 2
\f[B]ftpRespCodeList\f[R] CERT (PEN 6871) IE 359, variable length, basicList of
\f[B]ftpRespCode\f[R] CERT (PEN 6871) IE 135, variable length, string
.RS 2
.PP
FTP Replies from the server.
This consists of a three digit number followed by some text.
.RE
.SS TLS/SSL
.PP
Transport Layer Security (TLS)/Secure Socket Layer (SSL) Deep Packet Inspection
can identify and export handshake and certificate information if it is contained
in the payload of the flow.
The TLS/SSL DPI is presented in a nested structure, detailed in this section.
At the top level are the TLS handshake-related elements.
.PP
Each certificate identified by \f[B]yaf\f[R] is exported as an entry in the
\f[B]sslCertList\f[R] subTemplateList or/and the
\f[B]sslBinaryCertificateList\f[R] basicList.
\f[B]sslCertList\f[R] is used when the yafDPIRules.conf file has
\f[B]cert_export_enabled\f[R] set to \f[V]false\f[R] (the default) or
\f[B]cert_hash_enabled\f[R] set to \f[V]true\f[R] (\f[V]false\f[R] is the
default).
\f[B]sslBinaryCertificateList\f[R] is used when \f[B]cert_export_enabled\f[R] is
\f[V]true\f[R].
(To get both lists, set both those variable to \f[V]true\f[R].)
.PP
An entry in \f[B]sslCertList\f[R] contains basic certificate elements such as
serial numbers, validity timestamps, and optionally the certificate\[aq]s hash
when \f[B]cert_hash_enabled\f[R] is set to \f[V]true\f[R].
\f[B]sslCertList\f[R] also contains three nested subTemplateLists:
\f[B]sslIssuerFieldList\f[R] for Issuer fields, \f[B]sslSubjectFieldList\f[R]
for Subject fields, and \f[B]sslExtensionFieldList\f[R] for Extension fields.
Each of these subTemplateLists contains an ID and it associated value, where the
IDs correspond to the attributes associated with X.509 Certificates, object
identifiers id-ce and id-at.
See below.
.PP
\f[B]sslBinaryCertificateList\f[R] is a basicList of
\f[B]sslBinaryCertificate\f[R] entries, where each entry hold an entire binary
certificate.
.PP
Note that most certificate chains are about 3000 bytes.
In order to capture the entire certificate chain, the \f[B]--max-payload\f[R]
option to \f[B]yaf\f[R] should be set appropriately.
.SS TLS/SSL Handshake-related Elements
.IP \[bu] 2
\f[B]sslServerName\f[R] CERT (PEN 6871) IE 294, variable length, string
.RS 2
.PP
The server name from the SSL/TLS Client Hello.
This is typically the name of the server that the client is connecting to.
.RE
.IP \[bu] 2
\f[B]sslCipherList\f[R] CERT (PEN 6871) IE 389, variable length, basicList of
\f[B]sslCipher\f[R] CERT (PEN 6871) IE 185, 4 octets, unsigned
.RS 2
.PP
The list of CipherSuites suggested by the client in the ClientHello Message.
.RE
.IP \[bu] 2
\f[B]sslServerCipher\f[R] CERT (PEN 6871) IE 187, 4 octets, unsigned
.RS 2
.PP
The CipherSuite chosen by the server in the ServerHello message.
.RE
.IP \[bu] 2
\f[B]sslClientVersion\f[R] CERT (PEN 6871) IE 186, 1 octet, unsigned
.RS 2
.PP
The version contained in the initial ClientHello message.
.RE
.IP \[bu] 2
\f[B]sslCompressionMethod\f[R] CERT (PEN 6871) IE 188, 1 octet, unsigned
.RS 2
.PP
The compression method chosen by the server in the ServerHello message.
.RE
.IP \[bu] 2
\f[B]sslRecordVersion\f[R] CERT (PEN 6871) IE 288, 2 octets, unsigned
.RS 2
.PP
The version of SSL or TLS that was used in the flow.
.RE
.IP \[bu] 2
\f[B]sslClientJA3\f[R] CERT (PEN 6871) IE 463, variable length, octetarray
.RS 2
.PP
The JA3 MD5 hash of the sslClientJA3Fingerprint (CERT/464) calculated on the
client-side TLS/SSL fingerprint string.
.RE
.IP \[bu] 2
\f[B]sslClientJA3Fingerprint\f[R] CERT (PEN 6871) IE 464, variable length,
string
.RS 2
.PP
The JA3 fingerprint string enumerated from the TLS/SSL ClientHello packet.
Element sslClientJA3 (CERT/463) holds the MD5 of this.
.RE
.IP \[bu] 2
\f[B]sslServerJA3S\f[R] CERT (PEN 6871) IE 465, variable length, octetarray
.RS 2
.PP
The JA3S MD5 hash of the sslServerJA3SFingerprint (CERT/466) calculated on the
server-side TLS/SSL fingerprint string.
.RE
.IP \[bu] 2
\f[B]sslServerJA3SFingerprint\f[R] CERT (PEN 6871) IE 466, variable length,
string
.RS 2
.PP
The JA3S fingerprint string enumerated from the TLS/SSL ServerHello packet.
Element sslServerJA3S (CERT/465) holds the MD5 of this.
.RE
.SS TLS/SSL X.509 Certificate-related Elements
.PP
When \f[B]cert_export_enabled\f[R] is \f[V]false\f[R] or
\f[B]cert_hash_enabled\f[R] is \f[V]true\f[R], the top-level TLS/SSL record
contains:
.IP \[bu] 2
\f[B]sslCertList\f[R] CERT (PEN 6871) IE 425, variable length, subTemplateList
.RS 2
.PP
This list contains 0 or more X.509 Certificates as available in the captured
payload.
Each entry in the \f[B]sslCertList\f[R] contains these elements:
.IP \[bu] 2
\f[B]sslCertVersion\f[R] CERT (PEN 6871) IE 189, 1 octet, unsigned
.RS 2
.PP
The Certificate Version.
This is the value contained in the certificate v1(0), v2(1), v3(2).
.RE
.IP \[bu] 2
\f[B]sslCertSerialNumber\f[R] CERT (PEN 6871) IE 244, variable length,
octetArray
.RS 2
.PP
The Serial Number from the X.509 certificate.
.RE
.IP \[bu] 2
\f[B]sslCertValidityNotBefore\f[R] CERT (PEN 6871) IE 247, variable length,
string
.RS 2
.PP
The notBefore field in the Validity Sequence of the X.509 Certificate.
.RE
.IP \[bu] 2
\f[B]sslCertValidityNotAfter\f[R] CERT (PEN 6871) IE 248, variable length,
string
.RS 2
.PP
The notAfter field in the Validity Sequence of the X.509 Certificate.
.RE
.IP \[bu] 2
\f[B]sslPublicKeyAlgorithm\f[R] CERT (PEN 6871) IE 249, variable length,
octetArray
.RS 2
.PP
The algorithm, encoded in ASN.1, in the SubjectPublicKeyInfo Sequence of the
X.509 Certificate.
.RE
.IP \[bu] 2
\f[B]sslPublicKeyLength\f[R] CERT (PEN 6871) IE 250, 2 octets, unsigned
.RS 2
.PP
The length of the public key in the X.509 Certificate.
.RE
.IP \[bu] 2
\f[B]sslCertSignature\f[R] CERT (PEN 6871) IE 190, variable length, octetArray
.RS 2
.PP
The signature contained in the X.509 certificate.
This is typically the hashing algorithm identifier.
.RE
.IP \[bu] 2
\f[B]sslCertificateHash\f[R] CERT (PEN 6871) IE 295, variable length, octetArray
.RS 2
.PP
The hash of the X.509 certificate as found in the certificate.
This field is only populated if \f[B]cert_hash_enabled\f[R] is set to
\f[V]true\f[R] in the yafDPIRules.conf file, otherwise it is present but empty.
.RE
.IP \[bu] 2
\f[B]sslIssuerFieldList\f[R] CERT (PEN 6871) IE 426, variable length,
subTemplateList
.RS 2
.PP
The Issuer field identifies the entity that has signed and issued the
certificate.
See below for its contents.
.RE
.IP \[bu] 2
\f[B]sslSubjectFieldList\f[R] CERT (PEN 6871) IE 427, variable length,
subTemplateList
.RS 2
.PP
The Subject field identifies the entity associated with the public key stored in
the subject public key field.
See below for its contents.
.RE
.IP \[bu] 2
\f[B]sslExtensionFieldList\f[R] CERT (PEN 6871) IE 428, variable length,
subTemplateList
.RS 2
.PP
Extensions are only defined for X.509 v3 certificates and provide methods for
associating additional attributes with the Issuer and Subject information.
See below for its contents.
.RE
.RE
.SS TLS/SSL Issuer and Subject Field Lists
.PP
The \f[B]sslIssuerFieldList\f[R] and \f[B]sslSubjectFieldList\f[R] are encoded
as a sequence of Relative Distinguished Names, which are basically type-value
pairs.
These lists contain zero or more occurrences of the RelativeDistinguishedName
id-value pairs pulled from the X.509 Certificate.
\f[B]sslIssuerFieldList\f[R] entries are pulled from the Issuer RDNSequence, and
\f[B]sslIssuerFieldList\f[R] entries from the Subject RDNSequence.
There is one entry in the list for each pair.
Each entry contains:
.IP \[bu] 2
\f[B]sslObjectValue\f[R] CERT (PEN 6871) IE 246, variable length, octetArray
.RS 2
.PP
The bit strings associated with the below attribute types.
.RE
.IP \[bu] 2
\f[B]sslObjectType\f[R] CERT (PEN 6871) IE 245, 1 octet, unsigned
.RS 2
.PP
The member ID of the RDN identifier.
\f[B]yaf\f[R] only parses RDNSequence objects that are members of the id-at arc
{joint-iso-itu-t(2) ds(5) attributeType(4)}, pkcs-9 {iso(1) member-body (2)
us(840) rsadsi(113459) pkcs(1) 9}, and LDAP dc 0.9.2342.19200300.100.1.25.
This field does not contain the full object identifier, it only contains the
member id.
For example, for an issuer common name, sslObjectType will contain 3.
.PP
Below is a list of common objects in an X.509 RelativeDistinguishedName Sequence
for X.509 Certificates:
.PP
.TS
tab(@);
r l l.
T{
sslObjectType
T}@T{
ID
T}@T{
Reference
T}
_
T{
1
T}@T{
\f[B]pkcs-9-emailAddress\f[R]
T}@T{
pkcs-9 1
T}
T{
3
T}@T{
\f[B]id-at-commonName\f[R]
T}@T{
id-at 3
T}
T{
6
T}@T{
\f[B]id-at-countryName\f[R]
T}@T{
id-at 6
T}
T{
7
T}@T{
\f[B]id-at-localityName\f[R]
T}@T{
id-at 7
T}
T{
8
T}@T{
\f[B]id-at-stateOrProvinceName\f[R]
T}@T{
id-at 8
T}
T{
9
T}@T{
\f[B]id-at-streetAddress\f[R]
T}@T{
id-at 9
T}
T{
10
T}@T{
\f[B]id-at-organizationName\f[R]
T}@T{
id-at 10
T}
T{
11
T}@T{
\f[B]id-at-organizationalUnitName\f[R]
T}@T{
id-at 11
T}
T{
12
T}@T{
\f[B]id-at-title\f[R]
T}@T{
id-at 12
T}
T{
17
T}@T{
\f[B]id-at-postalCode\f[R]
T}@T{
id-at 17
T}
T{
25
T}@T{
\f[B]0.9.2342.19200300.100.1.25\f[R]
T}@T{
dc 25
T}
T{
41
T}@T{
\f[B]id-at-name\f[R]
T}@T{
id-at 41
T}
.TE
.RE
.SS TLS/SSL Extension Field List
.PP
Extensions are only defined for X.509 v3 certificates and provide methods for
associating additional attributes with the Issuer and Subject information.
The \f[B]sslExtensionFieldList\f[R] contains zero or more occurrences of the
following element pair:
.IP \[bu] 2
\f[B]sslObjectValue\f[R] CERT (PEN 6871) IE 246, variable length, octetArray
.RS 2
.PP
The ASN.1 structure associated with the below attribute types.
\f[B]yaf\f[R] does not parse the ASN.1 values for the string objects; it
includes the entire ASN.1 structure in the this field.
.RE
.IP \[bu] 2
\f[B]sslObjectType\f[R] CERT (PEN 6871) IE 245, 1 octet, unsigned
.RS 2
.PP
An identifier for the extension, but not the entire extension ID.
\f[B]yaf\f[R] only parses extensions that are members of the id-ce arc
{joint-iso-itu-t(2) ds(5) certificateExtension(29)} and only exports information
about the following objects.
The leading number will appear in this field.
.PP
.TS
tab(@);
r l l.
T{
sslObjectType
T}@T{
ID
T}@T{
Reference
T}
_
T{
14
T}@T{
\f[B]id-ce-subjectKeyIdentifier\f[R]
T}@T{
id-ce 14
T}
T{
15
T}@T{
\f[B]id-ce-keyUsage\f[R]
T}@T{
id-ce 15
T}
T{
16
T}@T{
\f[B]id-ce-privateKeyUsagePeriod\f[R]
T}@T{
id-ce 16
T}
T{
17
T}@T{
\f[B]id-ce-subjectAltName\f[R]
T}@T{
id-ce 17
T}
T{
18
T}@T{
\f[B]id-ce-issuerAltName\f[R]
T}@T{
id-ce 18
T}
T{
29
T}@T{
\f[B]id-ce-certificateIssuer\f[R]
T}@T{
id-ce 29
T}
T{
31
T}@T{
\f[B]id-ce-cRLDistributionPoints\f[R]
T}@T{
id-ce 31
T}
T{
32
T}@T{
\f[B]id-ce-certificatePolicies\f[R]
T}@T{
id-ce 32
T}
T{
35
T}@T{
\f[B]id-ce-authorityKeyIdentifier\f[R]
T}@T{
id-ce 35
T}
T{
37
T}@T{
\f[B]id-ce-extKeyUsage\f[R]
T}@T{
id-ce 37
T}
.TE
.RS
.PP
\f[B]Note:\f[R] Although \f[B]sslExtensionFieldList\f[R] has the same structure
as \f[B]sslIssuerFieldList\f[R] and \f[B]sslSubjectFieldList\f[R], the values
used in the extension list map to different values.
.RE
.RE
.SS Full Certificate Export Template
.PP
When \f[B]cert_export_enabled\f[R] is \f[V]true\f[R], the top-level TLS/SSL
record contains:
.IP \[bu] 2
\f[B]sslBinaryCertificateList\f[R] CERT (PEN 6871) IE 429, variable length,
basicList of \f[B]sslBinaryCertificate\f[R] CERT (PEN 6871) IE 296, variable
length, octetArray
.RS 2
.PP
The complete X.509 certificates.
There will be one entry for each certificate that \f[B]yaf\f[R] observes in the
captured payload.
.RE
.SS SLP
.PP
Service Location Protocol (SLP) Deep Packet Inspection is based on RFC
2608 (https://datatracker.ietf.org/doc/html/rfc2608.html).
.IP \[bu] 2
\f[B]slpStringList\f[R] CERT (PEN 6871) IE 354, variable length, basicList of
\f[B]slpString\f[R] CERT (PEN 6871) IE 130, variable length, string
.RS 2
.PP
Contains the text elements found in an SLP Service Request.
.RE
.IP \[bu] 2
\f[B]slpVersion\f[R] CERT (PEN 6871) IE 128, 1 octet, unsigned
.RS 2
.PP
SLP Version Number.
.RE
.IP \[bu] 2
\f[B]slpMessageType\f[R] CERT (PEN 6871) IE 129, 1 octet, unsigned
.RS 2
.PP
SLP Message Type.
This value should be between 1 and 11 and describes the type of SLP message.
.RE
.SS IMAP
.PP
Internet Message Access Protocol (IMAP) Deep Packet Inspection is based on RFC
3501 (https://datatracker.ietf.org/doc/html/rfc3501.html).
.IP \[bu] 2
\f[B]imapCapabilityList\f[R] CERT (PEN 6871) IE 360, variable length, basicList
of \f[B]imapCapability\f[R] CERT (PEN 6871) IE 136, variable length, string
.RS 2
.PP
IMAP Capability Command and Response.
Captures the listing of capabilities that the server supports.
.RE
.IP \[bu] 2
\f[B]imapLoginList\f[R] CERT (PEN 6871) IE 361, variable length, basicList of
\f[B]imapLogin\f[R] CERT (PEN 6871) IE 137, variable length, string
.RS 2
.PP
IMAP Login Command.
Arguments are user name and password.
.RE
.IP \[bu] 2
\f[B]imapStartTLSList\f[R] CERT (PEN 6871) IE 362, variable length, basicList of
\f[B]imapStartTLS\f[R] CERT (PEN 6871) IE 138, variable length, string
.RS 2
.PP
IMAP STARTTLS Command.
Captures this command only as no arguments or responses are related.
.RE
.IP \[bu] 2
\f[B]imapAuthenticateList\f[R] CERT (PEN 6871) IE 363, variable length,
basicList of \f[B]imapAuthenticate\f[R] CERT (PEN 6871) IE 139, variable length,
string
.RS 2
.PP
IMAP Authenticate Command.
Captures the authentication mechanism name of the server following this command.
.RE
.IP \[bu] 2
\f[B]imapCommandList\f[R] CERT (PEN 6871) IE 364, variable length, basicList of
\f[B]imapCommand\f[R] CERT (PEN 6871) IE 140, variable length, string
.RS 2
.PP
Captures a variety of IMAP Commands and their arguments.
.RE
.IP \[bu] 2
\f[B]imapExistsList\f[R] CERT (PEN 6871) IE 365, variable length, basicList of
\f[B]imapExists\f[R] CERT (PEN 6871) IE 141, variable length, string
.RS 2
.PP
IMAP Exists Response.
Reports the number of messages in the mailbox.
.RE
.IP \[bu] 2
\f[B]imapRecentList\f[R] CERT (PEN 6871) IE 366, variable length, basicList of
\f[B]imapRecent\f[R] CERT (PEN 6871) IE 142, variable length, string
.RS 2
.PP
IMAP Recent Response.
Reports the number of message with the Recent flag set.
.RE
.SS IRC
.PP
Internet Relay Chat (IRC) Deep Packet Inspection is based on RFC
2812 (https://datatracker.ietf.org/doc/html/rfc2812.html).
.IP \[bu] 2
\f[B]ircTextMessageList\f[R] CERT (PEN 6871) IE 353, variable length, basicList
of \f[B]ircTextMessage\f[R] CERT (PEN 6871) IE 125, variable length, string
.RS 2
.PP
IRC Chat or Join Message.
This field contains any IRC Command and the following arguments.
.RE
.SS RTSP
.PP
Real Time Streaming Protocol (RTSP) Deep Packet Inspection is based on RFC
2326 (https://datatracker.ietf.org/doc/html/rfc2326.html).
.IP \[bu] 2
\f[B]rtspURLList\f[R] CERT (PEN 6871) IE 367, variable length, basicList of
\f[B]rtspURL\f[R] CERT (PEN 6871) IE 143, variable length, string
.RS 2
.PP
RTSP URL.
Captures the address of the network resources requested.
.RE
.IP \[bu] 2
\f[B]rtspVersionList\f[R] CERT (PEN 6871) IE 368, variable length, basicList of
\f[B]rtspVersion\f[R] CERT (PEN 6871) IE 144, variable length, string
.RS 2
.PP
RTSP Version Number.
.RE
.IP \[bu] 2
\f[B]rtspReturnCodeList\f[R] CERT (PEN 6871) IE 369, variable length, basicList
of \f[B]rtspReturnCode\f[R] CERT (PEN 6871) IE 145, variable length, string
.RS 2
.PP
RTSP Status-Line.
Captures the RTSP Protocol version, numeric status code, and the textual phrase
associated with the numeric code.
.RE
.IP \[bu] 2
\f[B]rtspContentLengthList\f[R] CERT (PEN 6871) IE 370, variable length,
basicList of \f[B]rtspContentLength\f[R] CERT (PEN 6871) IE 146, variable
length, string
.RS 2
.PP
RTSP Content-Length Header Field.
Contains the length of the content of the method.
.RE
.IP \[bu] 2
\f[B]rtspCommandList\f[R] CERT (PEN 6871) IE 371, variable length, basicList of
\f[B]rtspCommand\f[R] CERT (PEN 6871) IE 147, variable length, string
.RS 2
.PP
RTSP Command.
Captures the method to be performed and the Request-URI associated with the
method.
.RE
.IP \[bu] 2
\f[B]rtspContentTypeList\f[R] CERT (PEN 6871) IE 372, variable length, basicList
of \f[B]rtspContentType\f[R] CERT (PEN 6871) IE 148, variable length, string
.RS 2
.PP
RTSP Content Type.
.RE
.IP \[bu] 2
\f[B]rtspTransportList\f[R] CERT (PEN 6871) IE 373, variable length, basicList
of \f[B]rtspTransport\f[R] CERT (PEN 6871) IE 149, variable length, string
.RS 2
.PP
RTSP Transport request header field.
Captures the transport protocol used and the parameters that follow.
.RE
.IP \[bu] 2
\f[B]rtspCSeqList\f[R] CERT (PEN 6871) IE 374, variable length, basicList of
\f[B]rtspCSeq\f[R] CERT (PEN 6871) IE 150, variable length, string
.RS 2
.PP
RTSP CSeq field.
Contains the sequence number for an RTSP request-response pair.
.RE
.IP \[bu] 2
\f[B]rtspLocationList\f[R] CERT (PEN 6871) IE 375, variable length, basicList of
\f[B]rtspLocation\f[R] CERT (PEN 6871) IE 151, variable length, string
.RS 2
.PP
RTSP Location header field.
.RE
.IP \[bu] 2
\f[B]rtspPacketsReceivedList\f[R] CERT (PEN 6871) IE 376, variable length,
basicList of \f[B]rtspPacketsReceived\f[R] CERT (PEN 6871) IE 152, variable
length, string
.RS 2
.PP
RTSP Packets Received header field.
.RE
.IP \[bu] 2
\f[B]rtspUserAgentList\f[R] CERT (PEN 6871) IE 377, variable length, basicList
of \f[B]rtspUserAgent\f[R] CERT (PEN 6871) IE 153, variable length, string
.RS 2
.PP
RTSP User Agent field.
Contains information about the user agent originating the request.
.RE
.IP \[bu] 2
\f[B]rtspJitterList\f[R] CERT (PEN 6871) IE 378, variable length, basicList of
\f[B]rtspJitter\f[R] CERT (PEN 6871) IE 154, variable length, string
.RS 2
.PP
RTSP Jitter Value.
.RE
.SS SIP
.PP
Session Initiation Protocol (SIP) Deep Packet Inspection is based on RFC
3261 (https://datatracker.ietf.org/doc/html/rfc3261.html).
.IP \[bu] 2
\f[B]sipInviteList\f[R] CERT (PEN 6871) IE 379, variable length, basicList of
\f[B]sipInvite\f[R] CERT (PEN 6871) IE 155, variable length, string
.RS 2
.PP
SIP Invite Method.
Contains the SIP address and SIP Version Number.
.RE
.IP \[bu] 2
\f[B]sipCommandList\f[R] CERT (PEN 6871) IE 380, variable length, basicList of
\f[B]sipCommand\f[R] CERT (PEN 6871) IE 156, variable length, string
.RS 2
.PP
SIP Command.
Contains a SIP Method, SIP address, and SIP Version Number.
.RE
.IP \[bu] 2
\f[B]sipViaList\f[R] CERT (PEN 6871) IE 381, variable length, basicList of
\f[B]sipVia\f[R] CERT (PEN 6871) IE 157, variable length, string
.RS 2
.PP
SIP Via contains the SIP Version Number and the address the sender is expecting
to receive responses.
.RE
.IP \[bu] 2
\f[B]sipMaxForwardsList\f[R] CERT (PEN 6871) IE 382, variable length, basicList
of \f[B]sipMaxForwards\f[R] CERT (PEN 6871) IE 158, variable length, string
.RS 2
.PP
SIP Max Forwards contains the limit of number of hops a request can make on the
way to its destination.
.RE
.IP \[bu] 2
\f[B]sipAddressList\f[R] CERT (PEN 6871) IE 383, variable length, basicList of
\f[B]sipAddress\f[R] CERT (PEN 6871) IE 159, variable length, string
.RS 2
.PP
SIP Address contains the argument of the To, From, or Contact Header Fields.
.RE
.IP \[bu] 2
\f[B]sipContentLengthList\f[R] CERT (PEN 6871) IE 384, variable length,
basicList of \f[B]sipContentLength\f[R] CERT (PEN 6871) IE 160, variable length,
string
.RS 2
.PP
SIP Content Length header field.
Contains the byte count of the message byte.
.RE
.IP \[bu] 2
\f[B]sipUserAgentList\f[R] CERT (PEN 6871) IE 385, variable length, basicList of
\f[B]sipUserAgent\f[R] CERT (PEN 6871) IE 161, variable length, string
.RS 2
.PP
SIP User Agent Header Field.
Contains information about the User Agent Client originating the request.
.RE
.SS NNTP
.PP
Network News Transfer Protocol (NNTP) Deep Packet Inspection is based on RFC
977 (https://datatracker.ietf.org/doc/html/rfc977.html).
.IP \[bu] 2
\f[B]nntpResponseList\f[R] CERT (PEN 6871) IE 387, variable length, basicList of
\f[B]nntpResponse\f[R] CERT (PEN 6871) IE 172, variable length, string
.RS 2
.PP
NNTP Reply.
This consists of a three digit status code and text message.
.RE
.IP \[bu] 2
\f[B]nntpCommandList\f[R] CERT (PEN 6871) IE 388, variable length, basicList of
\f[B]nntpCommand\f[R] CERT (PEN 6871) IE 173, variable length, string
.RS 2
.PP
NNTP Command.
Contains an NNTP Command and following argument(s).
.RE
.SS TFTP
.PP
Trivial File Transfer Protocol (TFTP) Deep Packet Inspection is based on RFC
1350 (https://datatracker.ietf.org/doc/html/rfc1350.html).
.IP \[bu] 2
\f[B]tftpFilename\f[R] CERT (PEN 6871) IE 126, variable length, string
.RS 2
.PP
TFTP Name of File being transferred.
.RE
.IP \[bu] 2
\f[B]tftpMode\f[R] CERT (PEN 6871) IE 127, variable length, string
.RS 2
.PP
Contains the mode of transfer.
(Currently supported: netascii, octet, mail).
.RE
.SS MySQL
.PP
MySQL Deep Packet Inspection is based on information found in the MYSQL
Developer
Documentation (https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_PROTOCOL.html).
.IP \[bu] 2
\f[B]mysqlUsername\f[R] CERT (PEN 6871) IE 223, variable length, string
.RS 2
.PP
MySQL Login User Name.
.RE
.IP \[bu] 2
\f[B]mysqlCommandTextCodeList\f[R] CERT (PEN 6871) IE 424, variable length,
subTemplateList
.RS 2
.PP
A list of MySQL Command Code, Command Text Pairs.
There will be one entry in the list for each MySQL Command found.
.IP \[bu] 2
\f[B]mysqlCommandText\f[R] CERT (PEN 6871) IE 225, variable length, string
.RS 2
.PP
MySQL Command Text.
For example, this can be a SELECT, INSERT, DELETE statement.
.RE
.IP \[bu] 2
\f[B]mysqlCommandCode\f[R] CERT (PEN 6871) IE 224, 1 octet, unsigned
.RS 2
.PP
MySQL Command Code.
This number should be between 0 and 28.
.RE
.RE
.SS POP3
.PP
Post Office Protocol 3 (POP3) Deep Packet Inspection is based on RFC
1939 (https://datatracker.ietf.org/doc/html/rfc1939.html).
.IP \[bu] 2
\f[B]pop3TextMessageList\f[R] CERT (PEN 6871) IE 352, variable length, basicList
of \f[B]pop3TextMessage\f[R] CERT (PEN 6871) IE 124, variable length, string
.RS 2
.PP
POP3 Command and Replies.
Contains any command or reply message found in POP3 payload data.
.RE
.SS RTP
.PP
Real-time Transport Protocol (RTP) Deep Packet Inspection is based on RFC
3550 (https://datatracker.ietf.org/doc/html/rfc3550.html).
The Payload Type indicates the format of the payload and how it should be
interpreted by the receiving application.
.IP \[bu] 2
\f[B]rtpPayloadType\f[R] CERT (PEN 6871) IE 287, 1 octet, unsigned
.RS 2
.PP
The payload type in the RTP header of the first payload in the forward
direction.
.RE
.IP \[bu] 2
\f[B]reverseRtpPayloadType\f[R] CERT (PEN 6871) IE 16671, 1 octet, unsigned
.RS 2
.PP
The payload type in the RTP header of the first payload in the reverse
direction.
.RE
.SS DNP3
.PP
Distributed Network Protocol 3 (DNP3) Deep Packet Inspection is slightly
different than other plugin-based protocols, operating as a
\[dq]regex-plugin\[dq] dpi_type.
YAF will export the following information if the yafDPIRules.conf contain
regular expressions under the label ID 20000.
The regular expressions are compared against the payload of DNP3 packets
starting with the function code in the DNP Application Layer header.
YAF will loop through all the the available DNP3 packets contained in the
captured payload.
For each packet that matches one of the regular expressions listed in
yafDPIRules.conf, YAF will include an entry in the exported subTemplateList.
The DNP3 DPI is disabled by default.
To enable it, uncomment the DPI-related entries in the DNP3 rule in the
yafDPIRules.conf file.
.IP \[bu] 2
\f[B]subTemplateList\f[R] IE 292, variable length
.RS 2
.PP
An IPFIX SubTemplateList.
There will be one element in the list for each DNP3 packet that matches one of
the DNP3 regular expressions found in the yafDPIRules.conf file.
.RE
.IP \[bu] 2
\f[B]dnp3SourceAddress\f[R] CERT (PEN 6871) IE 281, 2 octets, unsigned
.RS 2
.PP
The DNP3 Source Address found in the Data Link Layer of the DNP Header.
.RE
.IP \[bu] 2
\f[B]dnp3DestinationAddress\f[R] CERT (PEN 6871) IE 282, 2 octets, unsigned
.RS 2
.PP
The DNP3 Destination Address found in the Data Link Layer of the DNP Header.
.RE
.IP \[bu] 2
\f[B]dnp3Function\f[R] CERT (PEN 6871) IE 283, 1 octet, unsigned
.RS 2
.PP
The DNP3 Function Code found in the first byte of the Application Layer.
.RE
.IP \[bu] 2
\f[B]dnp3ObjectData\f[R] CERT (PEN 6871) IE 284, variable length, octetArray
.RS 2
.PP
The pattern captured from the DNP3 regular expression in yafDPIRules.conf
.RE
.SS Modbus
.PP
Modbus DPI is similar to DNP3 DPI.
YAF will export any patterns matched by the regular expressions labeled with the
ID 502 found in the yafDPIRules.conf file.
The regular expressions are compared against the payload of all valid Modbus
packets starting right after the MBAP header (offset 7), beginning with the
Modbus function code.
The Modbus DPI is disabled by default.
To enable it, uncomment the DPI-related entries in the Modbus rule in the
yafDPIRules.conf file.
.IP \[bu] 2
\f[B]modbusDataList\f[R] CERT (PEN 6871) IE 420, variable length, basicList of
\f[B]modbusData\f[R] CERT (PEN 6871) IE 285, variable length, octetArray
.RS 2
.PP
Any patterns captured from the Modbus regular expressions in yafDPIRules.conf
.RE
.SS Ethernet/IP
.PP
Ethernet/IP DPI is similar to DNP3 and Modbus DPI.
YAF will export any patterns matched by the regular expressions labeled with the
ID 44818 in the yafDPIRules.conf file.
The regular expressions are compared against the start of the payload of all
valid Ethernet/IP packets (Command in the Encapsulation Header is the first
byte).
The Ethernet/IP DPI is disabled by default.
To enable it, uncomment the DPI-related entries in the Ethernet/IP rule in the
yafDPIRules.conf file.
.IP \[bu] 2
\f[B]enipDataList\f[R] CERT (PEN 6871) IE 421, variable length, basicList of
\f[B]enipData\f[R] CERT (PEN 6871) IE 286, variable length, octetArray
.RS 2
.PP
The pattern captured from the Ethernet/IP regular expressions in
yafDPIRules.conf
.RE
.SH FILES
.TP
??sysconfdir??/yafDPIRules.conf
Default location of the Application Labeling/Deep Packet Inspection rules file.
.TP
??pkglibdir??
Directory from which \f[B]yaf\f[R] loads Application Labeling/Deep Packet
Inspection plug-ins.
.SH SEE ALSO
.PP
\f[B]yaf(1)\f[R], \f[B]appabel(1)\f[R], \f[B]super_mediator(1)\f[R],
\f[B]pcresyntax(3)\f[R], \f[B]pcrepattern(3)\f[R],
https://tools.netsa.cert.org/cert-ipfix-registry/index.html,
https://www.lua.org/, https://www.pcre.org/
